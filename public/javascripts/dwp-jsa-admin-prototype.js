/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/assets/javascripts/dwp-jsa-admin-prototype.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/assets/javascripts/dwp-jsa-admin-prototype.js":
/*!***********************************************************!*\
  !*** ./app/assets/javascripts/dwp-jsa-admin-prototype.js ***!
  \***********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var govuk_frontend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! govuk-frontend */ \"./node_modules/govuk-frontend/all.js\");\n/* harmony import */ var govuk_frontend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(govuk_frontend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils */ \"./app/assets/javascripts/modules/utils.js\");\n/* harmony import */ var back_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! back-button */ \"./app/assets/javascripts/modules/back-button.js\");\n/* harmony import */ var auto_store_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! auto-store-data */ \"./app/assets/javascripts/modules/auto-store-data.js\");\n/* harmony import */ var character_count__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! character-count */ \"./app/assets/javascripts/modules/character-count.js\");\n/* harmony import */ var dwp_header_dwp_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dwp-header/dwp-header */ \"./app/views/components/dwp-header/dwp-header.js\");\n/* harmony import */ var dwp_header_dwp_header__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dwp_header_dwp_header__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n\n\nif (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {\n  _init();\n} else {\n  document.addEventListener('DOMContentLoaded', _init());\n}\n\nfunction _init() {\n  // GOVUKFrontEnd init\n  Object(govuk_frontend__WEBPACK_IMPORTED_MODULE_0__[\"initAll\"])(); // Init utility methods\n\n  utils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].init(); // Init History back button\n\n  back_button__WEBPACK_IMPORTED_MODULE_2__[\"default\"].init(); // Init Auto storing of form data\n\n  auto_store_data__WEBPACK_IMPORTED_MODULE_3__[\"default\"].init(); // Init character count on <textarea>\n\n  var characterCount = new character_count__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n  characterCount.init(); // Find first header module to enhance.\n\n  var $toggleButton = document.querySelector('[data-module=\"dwp-header\"]');\n  new dwp_header_dwp_header__WEBPACK_IMPORTED_MODULE_5___default.a($toggleButton).init();\n}\n\n//# sourceURL=webpack:///./app/assets/javascripts/dwp-jsa-admin-prototype.js?");

/***/ }),

/***/ "./app/assets/javascripts/modules/auto-store-data.js":
/*!***********************************************************!*\
  !*** ./app/assets/javascripts/modules/auto-store-data.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* AutoStoreData */\n\nvar AutoStoreData = function AutoStoreData() {\n  // On form submit, add hidden inputs for checkboxes so the server knows if\n  // they've been unchecked. This means we can automatically store and update\n  // all form data on the server, including checkboxes that are checked, then\n  // later unchecked\n  var $form = document.querySelector('form');\n\n  if ($form !== null) {\n    $form.addEventListener('submit', function () {\n      var $checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n      var names = {};\n      $checkboxes.forEach(function ($el, index) {\n        if (!names[$el.getAttribute('name')]) {\n          names[$el.getAttribute('name')] = true;\n          var $input = document.createElement('input');\n          $input.setAttribute('type', 'hidden');\n          $input.setAttribute('name', $el.getAttribute('name'));\n          $input.setAttribute('value', '_unchecked');\n          document.body.appendChild($input);\n        }\n\n        ;\n      });\n    });\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: AutoStoreData\n});\n\n//# sourceURL=webpack:///./app/assets/javascripts/modules/auto-store-data.js?");

/***/ }),

/***/ "./app/assets/javascripts/modules/back-button.js":
/*!*******************************************************!*\
  !*** ./app/assets/javascripts/modules/back-button.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* BackButton */\n\nvar BackButton = function BackButton() {\n  var $backButton = document.querySelector('.govuk-back-link, .js-still-apply');\n\n  if ($backButton !== null) {\n    $backButton.addEventListener('click', function (event) {\n      event.preventDefault();\n      window.history.go(-1);\n    });\n  }\n\n  ;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: BackButton\n});\n\n//# sourceURL=webpack:///./app/assets/javascripts/modules/back-button.js?");

/***/ }),

/***/ "./app/assets/javascripts/modules/character-count.js":
/*!***********************************************************!*\
  !*** ./app/assets/javascripts/modules/character-count.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return CharacterCount; });\n\n/*  Character and Word Count component\n    https://github.com/alphagov/ds-character-count\n    The code was modified to make use of the ES6 class syntax, this\n    class returns a singleton\n*/\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _instance = null;\nvar _charCount = null;\n\nvar CharacterCount = /*#__PURE__*/function () {\n  function CharacterCount() {\n    _classCallCheck(this, CharacterCount);\n\n    if (!_instance) {\n      _instance = this;\n      _charCount = this._init();\n      return CharacterCount.getInstance();\n    } else {\n      return false;\n    }\n  } // Private methods\n\n\n  _createClass(CharacterCount, [{\n    key: \"_init\",\n    value: function _init() {\n      function CharCount() {}\n\n      ;\n      CharCount.prototype.defaults = {\n        charCountAttribute: 'maxlength',\n        wordCountAttribute: 'data-maxwords'\n      }; // Escape tags and ampersand\n\n      function escape() {\n        var tagsToReplace = {\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;'\n        };\n        return this.replace(/[&<>]/g, function (tag) {\n          return tagsToReplace[tag] || tag;\n        });\n      }\n\n      ; // Wrap element in a div with a specified wrapper class\n\n      CharCount.prototype.wrapElement = function (element, wrapperClass) {\n        var wrapper = document.createElement('div');\n        wrapper.className = wrapperClass;\n        element.parentNode.insertBefore(wrapper, element);\n        element.parentNode.removeChild(element);\n        wrapper.appendChild(element);\n        return wrapper;\n      }; // Get style attribute of an element\n\n\n      CharCount.prototype.getStyle = function (element, attributeName) {\n        var attributeValue = '';\n\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n          attributeValue = document.defaultView.getComputedStyle(element, '').getPropertyValue(attributeName);\n        } else if (element.currentStyle) {\n          attributeName = attributeName.replace(/-(\\w)/g, function (strMatch, p1) {\n            return p1.toUpperCase();\n          });\n          attributeValue = element.currentStyle[attributeName];\n        }\n\n        return attributeValue;\n      }; // Browser sniffing is bad, but there are browser-specific quirks to handle that are not a matter of feature detection\n\n\n      CharCount.prototype.isIOS = function () {\n        if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {\n          return true;\n        } else {\n          return false;\n        }\n      }; // Fix iOS default padding\n      // iOS adds 3px of (unremovable) padding to the left and right of a textarea, so adjust highlights div to match\n\n\n      CharCount.prototype.fixIOSInput = function (element) {\n        var paddingLeft = parseInt(CharCount.prototype.getStyle(element, 'padding-left'));\n        var paddingRight = parseInt(CharCount.prototype.getStyle(element, 'padding-right'));\n        element.style.paddingLeft = paddingLeft + 3 + 'px';\n        element.style.paddingRight = paddingRight + 3 + 'px';\n      }; // Attach count to the field\n\n\n      CharCount.prototype.attach = function (options) {\n        // Determine the limit attribute\n        var countAttribute = options && options.wordCount ? this.defaults.wordCountAttribute : this.defaults.charCountAttribute; // Iterate through each `character count` element\n\n        var countElements = document.querySelectorAll(options.selector);\n\n        if (countElements) {\n          for (var i = 0, len = countElements.length; i < len; i++) {\n            var countElement = countElements[i]; // Highlights\n\n            if (options && options.highlight) {\n              var wrapper = CharCount.prototype.wrapElement(countElement, 'govuk-c-charcount__wrapper');\n              var elementId = countElement.getAttribute('id');\n              var countHighlightClass = countElement.type === 'text' ? 'govuk-c-charcount__highlight-input' : 'govuk-c-charcount__highlight';\n              wrapper.insertAdjacentHTML('afterbegin', '<div id=\"' + elementId + '-hl\" class=\"form-control ' + countHighlightClass + '\" aria-hidden=\"true\" role=\"presentation\"></div>');\n              var countHighlight = document.getElementById(elementId + '-hl'); // countHighlight.style.height = CharCount.prototype.getHeight(countElement) + 'px'\n              // countHighlight.style.height = countElement.getBoundingClientRect().height + 'px'\n\n              countHighlight.style.height = countElement.offsetHeight + 'px';\n              countHighlight.style.width = countElement.offsetWidth + 'px'; // We have to disable resize on highlighted components to avoid the async scroll and boundaries\n\n              countElement.style.resize = 'none'; // Fix iOS\n\n              if (CharCount.prototype.isIOS()) {\n                CharCount.prototype.fixIOSInput(countHighlight);\n              }\n            } // Set the element limit\n\n\n            var maxLength = countElement.getAttribute(countAttribute);\n            var rawUnderLimitMessage = countElement.getAttribute('data-message-under-limit') || 'You have [x] characters remaining';\n            var rawOverLimitMessage = countElement.getAttribute('data-message-over-limit') || 'You have [x] characters too many'; // Generate and reference message\n\n            var countMessage = CharCount.prototype.createCountMessage(countElement); // Bind the on change events\n\n            if (maxLength && countMessage) {\n              // Extend countElement with attributes in order to pass it through the EventListener\n              var countElementExtended = {\n                countElement: countElement,\n                countMessage: countMessage,\n                maxLength: maxLength,\n                options: options,\n                rawUnderLimitMessage: rawUnderLimitMessage,\n                rawOverLimitMessage: rawOverLimitMessage\n              };\n\n              if (options && options.highlight) {\n                countElementExtended.countHighlight = countHighlight;\n              } // Bind input\n\n\n              CharCount.prototype.bindChangeEvents(countElementExtended); // Trigger the proper event in order to display initial message\n              // $(countElement).trigger('input')\n              // CharCount.prototype.updateMessage.call(countElement)\n\n              CharCount.prototype.updateCountMessage(countElementExtended);\n              countElement.setAttribute('maxlength', '');\n              countElement.setAttribute('data-maxlength', maxLength);\n              countElement.classList.add('govuk-c-charcount');\n            } else {\n              if (!countMessage) window.console.warn('Make sure you set an id for each of your field(s)');\n              if (!maxLength) window.console.warn('Make sure you set the ' + countAttribute + ' for each of your field(s)');\n            }\n          }\n        }\n      }; // Counts characters or words in text\n\n\n      CharCount.prototype.count = function (text, options) {\n        var length;\n\n        if (options && options.wordCount) {\n          // var tokens = text.split(' ')\n          // length = tokens.length-1\n          var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\n\n          length = tokens.length;\n        } else {\n          length = text.length;\n        }\n\n        return length;\n      }; // Highlight text from a specific limit to end\n\n\n      CharCount.prototype.highlight = function (text, limit) {\n        text = text.replace(/\\n$/g, '\\n\\n');\n        var textBeforeLimit = escape(text.slice(0, limit));\n        var textAfterLimit = escape(text.slice(limit));\n        text = [textBeforeLimit, '<mark>', textAfterLimit, '</mark>'].join('');\n        return text;\n      }; // Generate count message and bind it to the input\n      // returns reference to the generated element\n\n\n      CharCount.prototype.createCountMessage = function (countElement) {\n        var elementId = countElement.getAttribute('id'); // Check for existing info count message\n\n        var countMessage = document.getElementById(elementId + '-info'); // If there is no existing info count message we add one right after the field\n\n        if (elementId && !countMessage) {\n          countElement.insertAdjacentHTML('afterend', '<span id=\"' + elementId + '-info\" class=\"form-hint char-count-info govuk-c-charcount__message\" aria-live=\"polite\"></span>');\n          countElement.setAttribute('aria-describedby', elementId + '-info');\n          countMessage = document.getElementById(elementId + '-info');\n        }\n\n        return countMessage;\n      }; // Bind input propertychange to the elements and update based on the change\n\n\n      CharCount.prototype.bindChangeEvents = function (countElementExtended) {\n        if (countElementExtended.countElement.addEventListener) {\n          // W3C event model\n          // countElementExtended.countElement.addEventListener('input', CharCount.prototype.handleInput.bind(countElementExtended))\n          // countElementExtended.countElement.addEventListener('onpropertychange', CharCount.prototype.updateCountMessage.bind(countElementExtended))\n          // IE 9 does not fire an input event when the user deletes characters from an input (e.g. by pressing Backspace or Delete, or using the \"Cut\" operation).\n          countElementExtended.countElement.addEventListener('keyup', CharCount.prototype.updateCountMessage.bind(this, countElementExtended));\n        } else {\n          // Microsoft event model: onpropertychange/onkeyup\n          countElementExtended.countElement.attachEvent('onkeyup', CharCount.prototype.handleInput.bind(this, countElementExtended));\n        } // Bind scroll event if highlight is set\n\n\n        if (countElementExtended.options.highlight === true) {\n          countElementExtended.countElement.addEventListener('scroll', CharCount.prototype.handleScroll.bind(this));\n          window.addEventListener('resize', CharCount.prototype.handleResize.bind(this));\n        } // Bind focus/blur events for polling\n\n\n        countElementExtended.countElement.addEventListener('focus', CharCount.prototype.handleFocus.bind(countElementExtended));\n        countElementExtended.countElement.addEventListener('blur', CharCount.prototype.handleBlur.bind(countElementExtended));\n      }; // Applications like Dragon NaturallySpeaking will modify the fields by directly changing its `value`.\n      // These events don't trigger in JavaScript, so we need to poll to handle when and if they occur.\n\n\n      CharCount.prototype.checkIfValueChanged = function (countElementExtended) {\n        if (typeof countElementExtended !== 'undefined') {\n          if (!countElementExtended.countElement.oldValue) countElementExtended.countElement.oldValue = '';\n\n          if (countElementExtended.countElement.value !== countElementExtended.countElement.oldValue) {\n            countElementExtended.countElement.oldValue = countElementExtended.countElement.value;\n            CharCount.prototype.updateCountMessage(countElementExtended);\n          }\n        }\n      }; // Update message box\n\n\n      CharCount.prototype.updateCountMessage = function (countElementExtended) {\n        var countElement = countElementExtended.countElement;\n\n        if (typeof countElement === 'undefined') {\n          return;\n        }\n\n        var options = countElementExtended.options;\n        var countMessage = countElementExtended.countMessage;\n        var countHighlight = countElementExtended.countHighlight; // var countMessage = document.getElementById(countElement.getAttribute('aria-describedby'))\n        // Determine the remainingNumber\n\n        var currentLength = CharCount.prototype.count(countElement.value, options);\n        var maxLength = countElementExtended.maxLength;\n        var remainingNumber = maxLength - currentLength;\n        var rawUnderLimitMessage = countElementExtended.rawUnderLimitMessage;\n        var rawOverLimitMessage = countElementExtended.rawOverLimitMessage; // Set threshold if presented in options\n\n        var threshold = 0;\n\n        if (options && options.threshold) {\n          threshold = options.threshold;\n        }\n\n        var thresholdValue = maxLength * threshold / 100;\n\n        if (thresholdValue > currentLength) {\n          countMessage.classList.add('govuk-c-charcount__message--disabled');\n        } else {\n          countMessage.classList.remove('govuk-c-charcount__message--disabled');\n        }\n\n        if (!options.defaultBorder) {\n          // Update styles\n          if (remainingNumber < 0) {\n            countElement.classList.add('form-control-error');\n\n            if (options && options.validation) {\n              countElement.parentNode.classList.add('govuk-c-charcount__wrapper-error');\n            }\n\n            countMessage.classList.add('error-message');\n          } else {\n            countElement.classList.remove('form-control-error');\n\n            if (options && options.validation) {\n              countElement.parentNode.classList.remove('govuk-c-charcount__wrapper-error');\n            }\n\n            countMessage.classList.remove('error-message');\n          }\n        } // Update message\n\n\n        var displayNumber = Math.abs(remainingNumber);\n        countMessage.innerHTML = remainingNumber < 0 ? rawOverLimitMessage.replace('[x]', displayNumber) : rawUnderLimitMessage.replace('[x]', displayNumber); // Update Highlight\n\n        if (countHighlight) {\n          var highlightedText = CharCount.prototype.highlight(countElement.value, maxLength);\n          countHighlight.innerHTML = highlightedText;\n        }\n      }; // Check if value changed after input triggered\n\n\n      CharCount.prototype.handleInput = function (event) {\n        CharCount.prototype.checkIfValueChanged(this);\n      }; // Check if value changed on focus\n\n\n      CharCount.prototype.handleFocus = function (event) {\n        this.valueChecker = setInterval(CharCount.prototype.checkIfValueChanged, 100, this); // The following line sets the height properly when the component is hidden at load time\n\n        if (typeof this.countHighlight !== 'undefined') {\n          this.countHighlight.style.height = this.countElement.getBoundingClientRect().height + 'px'; // TODO: bind the resize handler\n\n          this.countHighlight.style.width = this.countElement.getBoundingClientRect().width + 'px'; // TODO: bind the resize handler\n        }\n      }; // Cancel valaue checking on blur\n\n\n      CharCount.prototype.handleBlur = function (event) {\n        clearInterval(this.valueChecker);\n      }; // Sync field scroll with the backdrop highlight scroll\n\n\n      CharCount.prototype.handleScroll = function (event) {\n        this.countHighlight.scrollTop = this.countElement.scrollTop;\n        this.countHighlight.scrollLeft = this.countElement.scrollLeft;\n      }; // Update element's height after window resize\n\n\n      CharCount.prototype.handleResize = function (event) {\n        this.countHighlight.style.height = this.countElement.getBoundingClientRect().height + 'px';\n        this.countHighlight.style.width = this.countElement.getBoundingClientRect().width + 'px';\n      }; // Initialize component\n\n\n      CharCount.prototype.init = function (options) {\n        if (options && options.selector) {\n          CharCount.prototype.attach(options);\n          CharCount.options = options;\n        } else {\n          window.console.warn('Please specify the selector for the char/word count field');\n        }\n      };\n\n      return new CharCount();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _charCount.init({\n        selector: '.js-char-count'\n      });\n    }\n  }]);\n\n  return CharacterCount;\n}();\n\n\n; // Static class methods\n\nCharacterCount.getInstance = function () {\n  return _instance;\n};\n\n//# sourceURL=webpack:///./app/assets/javascripts/modules/character-count.js?");

/***/ }),

/***/ "./app/assets/javascripts/modules/utils.js":
/*!*************************************************!*\
  !*** ./app/assets/javascripts/modules/utils.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable */\nvar Utils = function Utils() {\n  // Function.prototype.bind\n  //\n  // A polyfill for Function.prototype.bind. Which lets you bind a defined\n  // value to the `this` keyword in a function call.\n  //\n  // Bind is natively supported in:\n  //   IE9+\n  //   Chrome 7+\n  //   Firefox 4+\n  //   Safari 5.1.4+\n  //   iOS 6+\n  //   Android Browser 4+\n  //   Chrome for Android 0.16+\n  //\n  // Originally from:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n  if (Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n      if (typeof this !== \"function\") {\n        // closest thing possible to the ECMAScript 5\n        // internal IsCallable function\n        throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n      }\n\n      var aArgs = Array.prototype.slice.call(arguments, 1),\n          fToBind = this,\n          fNOP = function fNOP() {},\n          fBound = function fBound() {\n        return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n      };\n\n      fNOP.prototype = this.prototype;\n      fBound.prototype = new fNOP();\n      return fBound;\n    };\n  } // Nodelist.prototype.forEach\n\n\n  if (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = function (callback, thisArg) {\n      thisArg = thisArg || window;\n\n      for (var i = 0; i < this.length; i++) {\n        callback.call(thisArg, this[i], i, this);\n      }\n    };\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  init: Utils\n});\n\n//# sourceURL=webpack:///./app/assets/javascripts/modules/utils.js?");

/***/ }),

/***/ "./app/views/components/dwp-header/dwp-header.js":
/*!*******************************************************!*\
  !*** ./app/views/components/dwp-header/dwp-header.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n})(this, function () {\n  'use strict';\n\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Object/defineProperty/detect.js\n    var detect = // In IE8, defineProperty could only act on DOM elements, so full support\n    // for the feature requires the ability to set a property on an arbitrary object\n    'defineProperty' in Object && function () {\n      try {\n        var a = {};\n        Object.defineProperty(a, 'test', {\n          value: 42\n        });\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }();\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Object.defineProperty&flags=always\n\n    (function (nativeDefineProperty) {\n      var supportsAccessors = Object.prototype.hasOwnProperty('__defineGetter__');\n      var ERR_ACCESSORS_NOT_SUPPORTED = 'Getters & setters cannot be defined on this javascript engine';\n      var ERR_VALUE_ACCESSORS = 'A property cannot both have accessors and be writable or have a value';\n\n      Object.defineProperty = function defineProperty(object, property, descriptor) {\n        // Where native support exists, assume it\n        if (nativeDefineProperty && (object === window || object === document || object === Element.prototype || object instanceof Element)) {\n          return nativeDefineProperty(object, property, descriptor);\n        }\n\n        if (object === null || !(object instanceof Object || _typeof(object) === 'object')) {\n          throw new TypeError('Object.defineProperty called on non-object');\n        }\n\n        if (!(descriptor instanceof Object)) {\n          throw new TypeError('Property description must be an object');\n        }\n\n        var propertyString = String(property);\n        var hasValueOrWritable = 'value' in descriptor || 'writable' in descriptor;\n\n        var getterType = 'get' in descriptor && _typeof(descriptor.get);\n\n        var setterType = 'set' in descriptor && _typeof(descriptor.set); // handle descriptor.get\n\n\n        if (getterType) {\n          if (getterType !== 'function') {\n            throw new TypeError('Getter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineGetter__.call(object, propertyString, descriptor.get);\n        } else {\n          object[propertyString] = descriptor.value;\n        } // handle descriptor.set\n\n\n        if (setterType) {\n          if (setterType !== 'function') {\n            throw new TypeError('Setter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineSetter__.call(object, propertyString, descriptor.set);\n        } // OK to define value unconditionally - if a getter has been specified as well, an error would be thrown above\n\n\n        if ('value' in descriptor) {\n          object[propertyString] = descriptor.value;\n        }\n\n        return object;\n      };\n    })(Object.defineProperty);\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Function/prototype/bind/detect.js\n    var detect = ('bind' in Function.prototype);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Function.prototype.bind&flags=always\n\n    Object.defineProperty(Function.prototype, 'bind', {\n      value: function bind(that) {\n        // .length is 1\n        // add necessary es5-shim utilities\n        var $Array = Array;\n        var $Object = Object;\n        var ObjectPrototype = $Object.prototype;\n        var ArrayPrototype = $Array.prototype;\n\n        var Empty = function Empty() {};\n\n        var to_string = ObjectPrototype.toString;\n        var hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';\n        var isCallable;\n        /* inlined from https://npmjs.com/is-callable */\n\n        var fnToStr = Function.prototype.toString,\n            tryFunctionObject = function tryFunctionObject(value) {\n          try {\n            fnToStr.call(value);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        },\n            fnClass = '[object Function]',\n            genClass = '[object GeneratorFunction]';\n\n        isCallable = function isCallable(value) {\n          if (typeof value !== 'function') {\n            return false;\n          }\n\n          if (hasToStringTag) {\n            return tryFunctionObject(value);\n          }\n\n          var strClass = to_string.call(value);\n          return strClass === fnClass || strClass === genClass;\n        };\n\n        var array_slice = ArrayPrototype.slice;\n        var array_concat = ArrayPrototype.concat;\n        var array_push = ArrayPrototype.push;\n        var max = Math.max; // /add necessary es5-shim utilities\n        // 1. Let Target be the this value.\n\n        var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.\n\n        if (!isCallable(target)) {\n          throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        } // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n\n\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n\n        var bound;\n\n        var binder = function binder() {\n          if (this instanceof bound) {\n            // 15.3.4.5.2 [[Construct]]\n            // When the [[Construct]] internal method of a function object,\n            // F that was created using the bind function is called with a\n            // list of arguments ExtraArgs, the following steps are taken:\n            // 1. Let target be the value of F's [[TargetFunction]]\n            //   internal property.\n            // 2. If target has no [[Construct]] internal method, a\n            //   TypeError exception is thrown.\n            // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Construct]] internal\n            //   method of target providing args as the arguments.\n            var result = target.apply(this, array_concat.call(args, array_slice.call(arguments)));\n\n            if ($Object(result) === result) {\n              return result;\n            }\n\n            return this;\n          } else {\n            // 15.3.4.5.1 [[Call]]\n            // When the [[Call]] internal method of a function object, F,\n            // which was created using the bind function is called with a\n            // this value and a list of arguments ExtraArgs, the following\n            // steps are taken:\n            // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 2. Let boundThis be the value of F's [[BoundThis]] internal\n            //   property.\n            // 3. Let target be the value of F's [[TargetFunction]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Call]] internal method\n            //   of target providing boundThis as the this value and\n            //   providing args as the arguments.\n            // equiv: target.call(this, ...boundArgs, ...args)\n            return target.apply(that, array_concat.call(args, array_slice.call(arguments)));\n          }\n        }; // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n\n        var boundLength = max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n\n        var boundArgs = [];\n\n        for (var i = 0; i < boundLength; i++) {\n          array_push.call(boundArgs, '$' + i);\n        } // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n\n\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n          Empty.prototype = target.prototype;\n          bound.prototype = new Empty(); // Clean up dangling references.\n\n          Empty.prototype = null;\n        } // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n        // 22. Return F.\n\n\n        return bound;\n      }\n    });\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Window/detect.js\n    var detect = ('Window' in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Window&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      (function (global) {\n        if (global.constructor) {\n          global.Window = global.constructor;\n        } else {\n          (global.Window = global.constructor = new Function('return function Window() {}')()).prototype = this;\n        }\n      })(this);\n    }\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Document/detect.js\n    var detect = (\"Document\" in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Document&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      if (this.HTMLDocument) {\n        // IE8\n        // HTMLDocument is an extension of Document.  If the browser has HTMLDocument but not Document, the former will suffice as an alias for the latter.\n        this.Document = this.HTMLDocument;\n      } else {\n        // Create an empty function to act as the missing constructor for the document object, attach the document object as its prototype.  The function needs to be anonymous else it is hoisted and causes the feature detect to prematurely pass, preventing the assignments below being made.\n        this.Document = this.HTMLDocument = document.constructor = new Function('return function Document() {}')();\n        this.Document.prototype = document;\n      }\n    }\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Element/detect.js\n    var detect = 'Element' in this && 'HTMLElement' in this;\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element&flags=always\n\n    (function () {\n      // IE8\n      if (window.Element && !window.HTMLElement) {\n        window.HTMLElement = window.Element;\n        return;\n      } // create Element constructor\n\n\n      window.Element = window.HTMLElement = new Function('return function Element() {}')(); // generate sandboxed iframe\n\n      var vbody = document.appendChild(document.createElement('body'));\n      var frame = vbody.appendChild(document.createElement('iframe')); // use sandboxed iframe to replicate Element functionality\n\n      var frameDocument = frame.contentWindow.document;\n      var prototype = Element.prototype = frameDocument.appendChild(frameDocument.createElement('*'));\n      var cache = {}; // polyfill Element.prototype on an element\n\n      var shiv = function shiv(element, deep) {\n        var childNodes = element.childNodes || [],\n            index = -1,\n            key,\n            value,\n            childNode;\n\n        if (element.nodeType === 1 && element.constructor !== Element) {\n          element.constructor = Element;\n\n          for (key in cache) {\n            value = cache[key];\n            element[key] = value;\n          }\n        }\n\n        while (childNode = deep && childNodes[++index]) {\n          shiv(childNode, deep);\n        }\n\n        return element;\n      };\n\n      var elements = document.getElementsByTagName('*');\n      var nativeCreateElement = document.createElement;\n      var interval;\n      var loopLimit = 100;\n      prototype.attachEvent('onpropertychange', function (event) {\n        var propertyName = event.propertyName,\n            nonValue = !cache.hasOwnProperty(propertyName),\n            newValue = prototype[propertyName],\n            oldValue = cache[propertyName],\n            index = -1,\n            element;\n\n        while (element = elements[++index]) {\n          if (element.nodeType === 1) {\n            if (nonValue || element[propertyName] === oldValue) {\n              element[propertyName] = newValue;\n            }\n          }\n        }\n\n        cache[propertyName] = newValue;\n      });\n      prototype.constructor = Element;\n\n      if (!prototype.hasAttribute) {\n        // <Element>.hasAttribute\n        prototype.hasAttribute = function hasAttribute(name) {\n          return this.getAttribute(name) !== null;\n        };\n      } // Apply Element prototype to the pre-existing DOM as soon as the body element appears.\n\n\n      function bodyCheck() {\n        if (!loopLimit--) clearTimeout(interval);\n\n        if (document.body && !document.body.prototype && /(complete|interactive)/.test(document.readyState)) {\n          shiv(document, true);\n          if (interval && document.body.prototype) clearTimeout(interval);\n          return !!document.body.prototype;\n        }\n\n        return false;\n      }\n\n      if (!bodyCheck()) {\n        document.onreadystatechange = bodyCheck;\n        interval = setInterval(bodyCheck, 25);\n      } // Apply to any new elements created after load\n\n\n      document.createElement = function createElement(nodeName) {\n        var element = nativeCreateElement(String(nodeName).toLowerCase());\n        return shiv(element);\n      }; // remove sandboxed iframe\n\n\n      document.removeChild(vbody);\n    })();\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Event/detect.js\n    var detect = function (global) {\n      if (!('Event' in global)) return false;\n      if (typeof global.Event === 'function') return true;\n\n      try {\n        // In IE 9-11, the Event object exists but cannot be instantiated\n        new Event('click');\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }(this);\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Event&flags=always\n\n    (function () {\n      var unlistenableWindowEvents = {\n        click: 1,\n        dblclick: 1,\n        keyup: 1,\n        keypress: 1,\n        keydown: 1,\n        mousedown: 1,\n        mouseup: 1,\n        mousemove: 1,\n        mouseover: 1,\n        mouseenter: 1,\n        mouseleave: 1,\n        mouseout: 1,\n        storage: 1,\n        storagecommit: 1,\n        textinput: 1\n      }; // This polyfill depends on availability of `document` so will not run in a worker\n      // However, we asssume there are no browsers with worker support that lack proper\n      // support for `Event` within the worker\n\n      if (typeof document === 'undefined' || typeof window === 'undefined') return;\n\n      function indexOf(array, element) {\n        var index = -1,\n            length = array.length;\n\n        while (++index < length) {\n          if (index in array && array[index] === element) {\n            return index;\n          }\n        }\n\n        return -1;\n      }\n\n      var existingProto = window.Event && window.Event.prototype || null;\n\n      window.Event = Window.prototype.Event = function Event(type, eventInitDict) {\n        if (!type) {\n          throw new Error('Not enough arguments');\n        }\n\n        var event; // Shortcut if browser supports createEvent\n\n        if ('createEvent' in document) {\n          event = document.createEvent('Event');\n          var bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n          var cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n          event.initEvent(type, bubbles, cancelable);\n          return event;\n        }\n\n        event = document.createEventObject();\n        event.type = type;\n        event.bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n        event.cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n        return event;\n      };\n\n      if (existingProto) {\n        Object.defineProperty(window.Event, 'prototype', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: existingProto\n        });\n      }\n\n      if (!('createEvent' in document)) {\n        window.addEventListener = Window.prototype.addEventListener = Document.prototype.addEventListener = Element.prototype.addEventListener = function addEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1];\n\n          if (element === window && type in unlistenableWindowEvents) {\n            throw new Error('In IE8 the event: ' + type + ' is not available on the window object. Please see https://github.com/Financial-Times/polyfill-service/issues/317 for more information.');\n          }\n\n          if (!element._events) {\n            element._events = {};\n          }\n\n          if (!element._events[type]) {\n            element._events[type] = function (event) {\n              var list = element._events[event.type].list,\n                  events = list.slice(),\n                  index = -1,\n                  length = events.length,\n                  eventElement;\n\n              event.preventDefault = function preventDefault() {\n                if (event.cancelable !== false) {\n                  event.returnValue = false;\n                }\n              };\n\n              event.stopPropagation = function stopPropagation() {\n                event.cancelBubble = true;\n              };\n\n              event.stopImmediatePropagation = function stopImmediatePropagation() {\n                event.cancelBubble = true;\n                event.cancelImmediate = true;\n              };\n\n              event.currentTarget = element;\n              event.relatedTarget = event.fromElement || null;\n              event.target = event.target || event.srcElement || element;\n              event.timeStamp = new Date().getTime();\n\n              if (event.clientX) {\n                event.pageX = event.clientX + document.documentElement.scrollLeft;\n                event.pageY = event.clientY + document.documentElement.scrollTop;\n              }\n\n              while (++index < length && !event.cancelImmediate) {\n                if (index in events) {\n                  eventElement = events[index];\n\n                  if (indexOf(list, eventElement) !== -1 && typeof eventElement === 'function') {\n                    eventElement.call(element, event);\n                  }\n                }\n              }\n            };\n\n            element._events[type].list = [];\n\n            if (element.attachEvent) {\n              element.attachEvent('on' + type, element._events[type]);\n            }\n          }\n\n          element._events[type].list.push(listener);\n        };\n\n        window.removeEventListener = Window.prototype.removeEventListener = Document.prototype.removeEventListener = Element.prototype.removeEventListener = function removeEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1],\n              index;\n\n          if (element._events && element._events[type] && element._events[type].list) {\n            index = indexOf(element._events[type].list, listener);\n\n            if (index !== -1) {\n              element._events[type].list.splice(index, 1);\n\n              if (!element._events[type].list.length) {\n                if (element.detachEvent) {\n                  element.detachEvent('on' + type, element._events[type]);\n                }\n\n                delete element._events[type];\n              }\n            }\n          }\n        };\n\n        window.dispatchEvent = Window.prototype.dispatchEvent = Document.prototype.dispatchEvent = Element.prototype.dispatchEvent = function dispatchEvent(event) {\n          if (!arguments.length) {\n            throw new Error('Not enough arguments');\n          }\n\n          if (!event || typeof event.type !== 'string') {\n            throw new Error('DOM Events Exception 0');\n          }\n\n          var element = this,\n              type = event.type;\n\n          try {\n            if (!event.bubbles) {\n              event.cancelBubble = true;\n\n              var cancelBubbleEvent = function cancelBubbleEvent(event) {\n                event.cancelBubble = true;\n                (element || window).detachEvent('on' + type, cancelBubbleEvent);\n              };\n\n              this.attachEvent('on' + type, cancelBubbleEvent);\n            }\n\n            this.fireEvent('on' + type, event);\n          } catch (error) {\n            event.target = element;\n\n            do {\n              event.currentTarget = element;\n\n              if ('_events' in element && typeof element._events[type] === 'function') {\n                element._events[type].call(element, event);\n              }\n\n              if (typeof element['on' + type] === 'function') {\n                element['on' + type].call(element, event);\n              }\n\n              element = element.nodeType === 9 ? element.parentWindow : element.parentNode;\n            } while (element && !event.cancelBubble);\n          }\n\n          return true;\n        }; // Add the DOMContentLoaded Event\n\n\n        document.attachEvent('onreadystatechange', function () {\n          if (document.readyState === 'complete') {\n            document.dispatchEvent(new Event('DOMContentLoaded', {\n              bubbles: true\n            }));\n          }\n        });\n      }\n    })();\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n\n  function DWPHeader($module) {\n    this.$module = $module;\n  }\n\n  DWPHeader.prototype.init = function () {\n    // Check for module\n    var $module = this.$module;\n\n    if (!$module) {\n      return;\n    } // Check for button\n\n\n    var $toggleButton = $module.querySelector('.js-dwp-header-toggle');\n\n    if (!$toggleButton) {\n      return;\n    } // Handle $toggleButton click events\n\n\n    $toggleButton.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n  * Toggle class\n  * @param {object} node element\n  * @param {string} className to toggle\n  */\n\n\n  DWPHeader.prototype.toggleClass = function (node, className) {\n    if (node.className.indexOf(className) > 0) {\n      node.className = node.className.replace(' ' + className, '');\n    } else {\n      node.className += ' ' + className;\n    }\n  };\n  /**\n  * An event handler for click event on $toggleButton\n  * @param {object} event event\n  */\n\n\n  DWPHeader.prototype.handleClick = function (event) {\n    var $module = this.$module;\n    var $toggleButton = event.target || event.srcElement;\n    var $target = $module.querySelector('#' + $toggleButton.getAttribute('aria-controls')); // If a button with aria-controls, handle click\n\n    if ($toggleButton && $target) {\n      this.toggleClass($target, 'dwp-header__navigation--open');\n      this.toggleClass($toggleButton, 'dwp-header__menu-button--open');\n      $toggleButton.setAttribute('aria-expanded', $toggleButton.getAttribute('aria-expanded') !== 'true');\n      $target.setAttribute('aria-hidden', $target.getAttribute('aria-hidden') === 'false');\n    }\n  };\n\n  return DWPHeader;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./app/views/components/dwp-header/dwp-header.js?");

/***/ }),

/***/ "./node_modules/govuk-frontend/all.js":
/*!********************************************!*\
  !*** ./node_modules/govuk-frontend/all.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n})(this, function (exports) {\n  'use strict';\n  /**\n   * TODO: Ideally this would be a NodeList.prototype.forEach polyfill\n   * This seems to fail in IE8, requires more investigation.\n   * See: https://github.com/imagitama/nodelist-foreach-polyfill\n   */\n\n  function nodeListForEach(nodes, callback) {\n    if (window.NodeList.prototype.forEach) {\n      return nodes.forEach(callback);\n    }\n\n    for (var i = 0; i < nodes.length; i++) {\n      callback.call(window, nodes[i], i, nodes);\n    }\n  } // Used to generate a unique string, allows multiple instances of the component without\n  // Them conflicting with each other.\n  // https://stackoverflow.com/a/8809472\n\n\n  function generateUniqueID() {\n    var d = new Date().getTime();\n\n    if (typeof window.performance !== 'undefined' && typeof window.performance.now === 'function') {\n      d += window.performance.now(); // use high-precision timer if available\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  }\n\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Object/defineProperty/detect.js\n    var detect = // In IE8, defineProperty could only act on DOM elements, so full support\n    // for the feature requires the ability to set a property on an arbitrary object\n    'defineProperty' in Object && function () {\n      try {\n        var a = {};\n        Object.defineProperty(a, 'test', {\n          value: 42\n        });\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }();\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Object.defineProperty&flags=always\n\n    (function (nativeDefineProperty) {\n      var supportsAccessors = Object.prototype.hasOwnProperty('__defineGetter__');\n      var ERR_ACCESSORS_NOT_SUPPORTED = 'Getters & setters cannot be defined on this javascript engine';\n      var ERR_VALUE_ACCESSORS = 'A property cannot both have accessors and be writable or have a value';\n\n      Object.defineProperty = function defineProperty(object, property, descriptor) {\n        // Where native support exists, assume it\n        if (nativeDefineProperty && (object === window || object === document || object === Element.prototype || object instanceof Element)) {\n          return nativeDefineProperty(object, property, descriptor);\n        }\n\n        if (object === null || !(object instanceof Object || _typeof(object) === 'object')) {\n          throw new TypeError('Object.defineProperty called on non-object');\n        }\n\n        if (!(descriptor instanceof Object)) {\n          throw new TypeError('Property description must be an object');\n        }\n\n        var propertyString = String(property);\n        var hasValueOrWritable = 'value' in descriptor || 'writable' in descriptor;\n\n        var getterType = 'get' in descriptor && _typeof(descriptor.get);\n\n        var setterType = 'set' in descriptor && _typeof(descriptor.set); // handle descriptor.get\n\n\n        if (getterType) {\n          if (getterType !== 'function') {\n            throw new TypeError('Getter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineGetter__.call(object, propertyString, descriptor.get);\n        } else {\n          object[propertyString] = descriptor.value;\n        } // handle descriptor.set\n\n\n        if (setterType) {\n          if (setterType !== 'function') {\n            throw new TypeError('Setter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineSetter__.call(object, propertyString, descriptor.set);\n        } // OK to define value unconditionally - if a getter has been specified as well, an error would be thrown above\n\n\n        if ('value' in descriptor) {\n          object[propertyString] = descriptor.value;\n        }\n\n        return object;\n      };\n    })(Object.defineProperty);\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Function/prototype/bind/detect.js\n    var detect = ('bind' in Function.prototype);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Function.prototype.bind&flags=always\n\n    Object.defineProperty(Function.prototype, 'bind', {\n      value: function bind(that) {\n        // .length is 1\n        // add necessary es5-shim utilities\n        var $Array = Array;\n        var $Object = Object;\n        var ObjectPrototype = $Object.prototype;\n        var ArrayPrototype = $Array.prototype;\n\n        var Empty = function Empty() {};\n\n        var to_string = ObjectPrototype.toString;\n        var hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';\n        var isCallable;\n        /* inlined from https://npmjs.com/is-callable */\n\n        var fnToStr = Function.prototype.toString,\n            tryFunctionObject = function tryFunctionObject(value) {\n          try {\n            fnToStr.call(value);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        },\n            fnClass = '[object Function]',\n            genClass = '[object GeneratorFunction]';\n\n        isCallable = function isCallable(value) {\n          if (typeof value !== 'function') {\n            return false;\n          }\n\n          if (hasToStringTag) {\n            return tryFunctionObject(value);\n          }\n\n          var strClass = to_string.call(value);\n          return strClass === fnClass || strClass === genClass;\n        };\n\n        var array_slice = ArrayPrototype.slice;\n        var array_concat = ArrayPrototype.concat;\n        var array_push = ArrayPrototype.push;\n        var max = Math.max; // /add necessary es5-shim utilities\n        // 1. Let Target be the this value.\n\n        var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.\n\n        if (!isCallable(target)) {\n          throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        } // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n\n\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n\n        var bound;\n\n        var binder = function binder() {\n          if (this instanceof bound) {\n            // 15.3.4.5.2 [[Construct]]\n            // When the [[Construct]] internal method of a function object,\n            // F that was created using the bind function is called with a\n            // list of arguments ExtraArgs, the following steps are taken:\n            // 1. Let target be the value of F's [[TargetFunction]]\n            //   internal property.\n            // 2. If target has no [[Construct]] internal method, a\n            //   TypeError exception is thrown.\n            // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Construct]] internal\n            //   method of target providing args as the arguments.\n            var result = target.apply(this, array_concat.call(args, array_slice.call(arguments)));\n\n            if ($Object(result) === result) {\n              return result;\n            }\n\n            return this;\n          } else {\n            // 15.3.4.5.1 [[Call]]\n            // When the [[Call]] internal method of a function object, F,\n            // which was created using the bind function is called with a\n            // this value and a list of arguments ExtraArgs, the following\n            // steps are taken:\n            // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 2. Let boundThis be the value of F's [[BoundThis]] internal\n            //   property.\n            // 3. Let target be the value of F's [[TargetFunction]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Call]] internal method\n            //   of target providing boundThis as the this value and\n            //   providing args as the arguments.\n            // equiv: target.call(this, ...boundArgs, ...args)\n            return target.apply(that, array_concat.call(args, array_slice.call(arguments)));\n          }\n        }; // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n\n        var boundLength = max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n\n        var boundArgs = [];\n\n        for (var i = 0; i < boundLength; i++) {\n          array_push.call(boundArgs, '$' + i);\n        } // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n\n\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n          Empty.prototype = target.prototype;\n          bound.prototype = new Empty(); // Clean up dangling references.\n\n          Empty.prototype = null;\n        } // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n        // 22. Return F.\n\n\n        return bound;\n      }\n    });\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/detect.js\n    var detect = 'DOMTokenList' in this && function (x) {\n      return 'classList' in x ? !x.classList.toggle('x', false) && !x.className : true;\n    }(document.createElement('x'));\n\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/polyfill.js\n\n    (function (global) {\n      var nativeImpl = \"DOMTokenList\" in global && global.DOMTokenList;\n\n      if (!nativeImpl || !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg') && !(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").classList instanceof DOMTokenList)) {\n        global.DOMTokenList = function () {\n          // eslint-disable-line no-unused-vars\n          var dpSupport = true;\n\n          var defineGetter = function defineGetter(object, name, fn, configurable) {\n            if (Object.defineProperty) Object.defineProperty(object, name, {\n              configurable: false === dpSupport ? true : !!configurable,\n              get: fn\n            });else object.__defineGetter__(name, fn);\n          };\n          /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\n\n\n          try {\n            defineGetter({}, \"support\");\n          } catch (e) {\n            dpSupport = false;\n          }\n\n          var _DOMTokenList = function _DOMTokenList(el, prop) {\n            var that = this;\n            var tokens = [];\n            var tokenMap = {};\n            var length = 0;\n            var maxLength = 0;\n\n            var addIndexGetter = function addIndexGetter(i) {\n              defineGetter(that, i, function () {\n                preop();\n                return tokens[i];\n              }, false);\n            };\n\n            var reindex = function reindex() {\n              /** Define getter functions for array-like access to the tokenList's contents. */\n              if (length >= maxLength) for (; maxLength < length; ++maxLength) {\n                addIndexGetter(maxLength);\n              }\n            };\n            /** Helper function called at the start of each class method. Internal use only. */\n\n\n            var preop = function preop() {\n              var error;\n              var i;\n              var args = arguments;\n              var rSpace = /\\s+/;\n              /** Validate the token/s passed to an instance method, if any. */\n\n              if (args.length) for (i = 0; i < args.length; ++i) {\n                if (rSpace.test(args[i])) {\n                  error = new SyntaxError('String \"' + args[i] + '\" ' + \"contains\" + ' an invalid character');\n                  error.code = 5;\n                  error.name = \"InvalidCharacterError\";\n                  throw error;\n                }\n              }\n              /** Split the new value apart by whitespace*/\n\n              if (_typeof(el[prop]) === \"object\") {\n                tokens = (\"\" + el[prop].baseVal).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\n              } else {\n                tokens = (\"\" + el[prop]).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\n              }\n              /** Avoid treating blank strings as single-item token lists */\n\n\n              if (\"\" === tokens[0]) tokens = [];\n              /** Repopulate the internal token lists */\n\n              tokenMap = {};\n\n              for (i = 0; i < tokens.length; ++i) {\n                tokenMap[tokens[i]] = true;\n              }\n\n              length = tokens.length;\n              reindex();\n            };\n            /** Populate our internal token list if the targeted attribute of the subject element isn't empty. */\n\n\n            preop();\n            /** Return the number of tokens in the underlying string. Read-only. */\n\n            defineGetter(that, \"length\", function () {\n              preop();\n              return length;\n            });\n            /** Override the default toString/toLocaleString methods to return a space-delimited list of tokens when typecast. */\n\n            that.toLocaleString = that.toString = function () {\n              preop();\n              return tokens.join(\" \");\n            };\n\n            that.item = function (idx) {\n              preop();\n              return tokens[idx];\n            };\n\n            that.contains = function (token) {\n              preop();\n              return !!tokenMap[token];\n            };\n\n            that.add = function () {\n              preop.apply(that, args = arguments);\n\n              for (var args, token, i = 0, l = args.length; i < l; ++i) {\n                token = args[i];\n\n                if (!tokenMap[token]) {\n                  tokens.push(token);\n                  tokenMap[token] = true;\n                }\n              }\n              /** Update the targeted attribute of the attached element if the token list's changed. */\n\n\n              if (length !== tokens.length) {\n                length = tokens.length >>> 0;\n\n                if (_typeof(el[prop]) === \"object\") {\n                  el[prop].baseVal = tokens.join(\" \");\n                } else {\n                  el[prop] = tokens.join(\" \");\n                }\n\n                reindex();\n              }\n            };\n\n            that.remove = function () {\n              preop.apply(that, args = arguments);\n              /** Build a hash of token names to compare against when recollecting our token list. */\n\n              for (var args, ignore = {}, i = 0, t = []; i < args.length; ++i) {\n                ignore[args[i]] = true;\n                delete tokenMap[args[i]];\n              }\n              /** Run through our tokens list and reassign only those that aren't defined in the hash declared above. */\n\n\n              for (i = 0; i < tokens.length; ++i) {\n                if (!ignore[tokens[i]]) t.push(tokens[i]);\n              }\n\n              tokens = t;\n              length = t.length >>> 0;\n              /** Update the targeted attribute of the attached element. */\n\n              if (_typeof(el[prop]) === \"object\") {\n                el[prop].baseVal = tokens.join(\" \");\n              } else {\n                el[prop] = tokens.join(\" \");\n              }\n\n              reindex();\n            };\n\n            that.toggle = function (token, force) {\n              preop.apply(that, [token]);\n              /** Token state's being forced. */\n\n              if (undefined !== force) {\n                if (force) {\n                  that.add(token);\n                  return true;\n                } else {\n                  that.remove(token);\n                  return false;\n                }\n              }\n              /** Token already exists in tokenList. Remove it, and return FALSE. */\n\n\n              if (tokenMap[token]) {\n                that.remove(token);\n                return false;\n              }\n              /** Otherwise, add the token and return TRUE. */\n\n\n              that.add(token);\n              return true;\n            };\n\n            return that;\n          };\n\n          return _DOMTokenList;\n        }();\n      } // Add second argument to native DOMTokenList.toggle() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.toggle('x', false);\n        if (!e.classList.contains('x')) return;\n\n        e.classList.constructor.prototype.toggle = function toggle(token\n        /*, force*/\n        ) {\n          var force = arguments[1];\n\n          if (force === undefined) {\n            var add = !this.contains(token);\n            this[add ? 'add' : 'remove'](token);\n            return add;\n          }\n\n          force = !!force;\n          this[force ? 'add' : 'remove'](token);\n          return force;\n        };\n      })(); // Add multiple arguments to native DOMTokenList.add() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.add('a', 'b');\n        if (e.classList.contains('b')) return;\n        var _native = e.classList.constructor.prototype.add;\n\n        e.classList.constructor.prototype.add = function () {\n          var args = arguments;\n          var l = arguments.length;\n\n          for (var i = 0; i < l; i++) {\n            _native.call(this, args[i]);\n          }\n        };\n      })(); // Add multiple arguments to native DOMTokenList.remove() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.add('a');\n        e.classList.add('b');\n        e.classList.remove('a', 'b');\n        if (!e.classList.contains('b')) return;\n        var _native2 = e.classList.constructor.prototype.remove;\n\n        e.classList.constructor.prototype.remove = function () {\n          var args = arguments;\n          var l = arguments.length;\n\n          for (var i = 0; i < l; i++) {\n            _native2.call(this, args[i]);\n          }\n        };\n      })();\n    })(this);\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Document/detect.js\n    var detect = (\"Document\" in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Document&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      if (this.HTMLDocument) {\n        // IE8\n        // HTMLDocument is an extension of Document.  If the browser has HTMLDocument but not Document, the former will suffice as an alias for the latter.\n        this.Document = this.HTMLDocument;\n      } else {\n        // Create an empty function to act as the missing constructor for the document object, attach the document object as its prototype.  The function needs to be anonymous else it is hoisted and causes the feature detect to prematurely pass, preventing the assignments below being made.\n        this.Document = this.HTMLDocument = document.constructor = new Function('return function Document() {}')();\n        this.Document.prototype = document;\n      }\n    }\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Element/detect.js\n    var detect = 'Element' in this && 'HTMLElement' in this;\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element&flags=always\n\n    (function () {\n      // IE8\n      if (window.Element && !window.HTMLElement) {\n        window.HTMLElement = window.Element;\n        return;\n      } // create Element constructor\n\n\n      window.Element = window.HTMLElement = new Function('return function Element() {}')(); // generate sandboxed iframe\n\n      var vbody = document.appendChild(document.createElement('body'));\n      var frame = vbody.appendChild(document.createElement('iframe')); // use sandboxed iframe to replicate Element functionality\n\n      var frameDocument = frame.contentWindow.document;\n      var prototype = Element.prototype = frameDocument.appendChild(frameDocument.createElement('*'));\n      var cache = {}; // polyfill Element.prototype on an element\n\n      var shiv = function shiv(element, deep) {\n        var childNodes = element.childNodes || [],\n            index = -1,\n            key,\n            value,\n            childNode;\n\n        if (element.nodeType === 1 && element.constructor !== Element) {\n          element.constructor = Element;\n\n          for (key in cache) {\n            value = cache[key];\n            element[key] = value;\n          }\n        }\n\n        while (childNode = deep && childNodes[++index]) {\n          shiv(childNode, deep);\n        }\n\n        return element;\n      };\n\n      var elements = document.getElementsByTagName('*');\n      var nativeCreateElement = document.createElement;\n      var interval;\n      var loopLimit = 100;\n      prototype.attachEvent('onpropertychange', function (event) {\n        var propertyName = event.propertyName,\n            nonValue = !cache.hasOwnProperty(propertyName),\n            newValue = prototype[propertyName],\n            oldValue = cache[propertyName],\n            index = -1,\n            element;\n\n        while (element = elements[++index]) {\n          if (element.nodeType === 1) {\n            if (nonValue || element[propertyName] === oldValue) {\n              element[propertyName] = newValue;\n            }\n          }\n        }\n\n        cache[propertyName] = newValue;\n      });\n      prototype.constructor = Element;\n\n      if (!prototype.hasAttribute) {\n        // <Element>.hasAttribute\n        prototype.hasAttribute = function hasAttribute(name) {\n          return this.getAttribute(name) !== null;\n        };\n      } // Apply Element prototype to the pre-existing DOM as soon as the body element appears.\n\n\n      function bodyCheck() {\n        if (!loopLimit--) clearTimeout(interval);\n\n        if (document.body && !document.body.prototype && /(complete|interactive)/.test(document.readyState)) {\n          shiv(document, true);\n          if (interval && document.body.prototype) clearTimeout(interval);\n          return !!document.body.prototype;\n        }\n\n        return false;\n      }\n\n      if (!bodyCheck()) {\n        document.onreadystatechange = bodyCheck;\n        interval = setInterval(bodyCheck, 25);\n      } // Apply to any new elements created after load\n\n\n      document.createElement = function createElement(nodeName) {\n        var element = nativeCreateElement(String(nodeName).toLowerCase());\n        return shiv(element);\n      }; // remove sandboxed iframe\n\n\n      document.removeChild(vbody);\n    })();\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/8717a9e04ac7aff99b4980fbedead98036b0929a/packages/polyfill-library/polyfills/Element/prototype/classList/detect.js\n    var detect = 'document' in this && \"classList\" in document.documentElement && 'Element' in this && 'classList' in Element.prototype && function () {\n      var e = document.createElement('span');\n      e.classList.add('a', 'b');\n      return e.classList.contains('b');\n    }();\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element.prototype.classList&flags=always\n\n    (function (global) {\n      var dpSupport = true;\n\n      var defineGetter = function defineGetter(object, name, fn, configurable) {\n        if (Object.defineProperty) Object.defineProperty(object, name, {\n          configurable: false === dpSupport ? true : !!configurable,\n          get: fn\n        });else object.__defineGetter__(name, fn);\n      };\n      /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\n\n\n      try {\n        defineGetter({}, \"support\");\n      } catch (e) {\n        dpSupport = false;\n      }\n      /** Polyfills a property with a DOMTokenList */\n\n\n      var addProp = function addProp(o, name, attr) {\n        defineGetter(o.prototype, name, function () {\n          var tokenList;\n          var THIS = this,\n\n          /** Prevent this from firing twice for some reason. What the hell, IE. */\n          gibberishProperty = \"__defineGetter__\" + \"DEFINE_PROPERTY\" + name;\n          if (THIS[gibberishProperty]) return tokenList;\n          THIS[gibberishProperty] = true;\n          /**\n           * IE8 can't define properties on native JavaScript objects, so we'll use a dumb hack instead.\n           *\n           * What this is doing is creating a dummy element (\"reflection\") inside a detached phantom node (\"mirror\")\n           * that serves as the target of Object.defineProperty instead. While we could simply use the subject HTML\n           * element instead, this would conflict with element types which use indexed properties (such as forms and\n           * select lists).\n           */\n\n          if (false === dpSupport) {\n            var visage;\n            var mirror = addProp.mirror || document.createElement(\"div\");\n            var reflections = mirror.childNodes;\n            var l = reflections.length;\n\n            for (var i = 0; i < l; ++i) {\n              if (reflections[i]._R === THIS) {\n                visage = reflections[i];\n                break;\n              }\n            }\n            /** Couldn't find an element's reflection inside the mirror. Materialise one. */\n\n\n            visage || (visage = mirror.appendChild(document.createElement(\"div\")));\n            tokenList = DOMTokenList.call(visage, THIS, attr);\n          } else tokenList = new DOMTokenList(THIS, attr);\n\n          defineGetter(THIS, name, function () {\n            return tokenList;\n          });\n          delete THIS[gibberishProperty];\n          return tokenList;\n        }, true);\n      };\n\n      addProp(global.Element, \"classList\", \"className\");\n      addProp(global.HTMLElement, \"classList\", \"className\");\n      addProp(global.HTMLLinkElement, \"relList\", \"rel\");\n      addProp(global.HTMLAnchorElement, \"relList\", \"rel\");\n      addProp(global.HTMLAreaElement, \"relList\", \"rel\");\n    })(this);\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n\n  function Accordion($module) {\n    this.$module = $module;\n    this.moduleId = $module.getAttribute('id');\n    this.$sections = $module.querySelectorAll('.govuk-accordion__section');\n    this.$openAllButton = '';\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage();\n    this.controlsClass = 'govuk-accordion__controls';\n    this.openAllClass = 'govuk-accordion__open-all';\n    this.iconClass = 'govuk-accordion__icon';\n    this.sectionHeaderClass = 'govuk-accordion__section-header';\n    this.sectionHeaderFocusedClass = 'govuk-accordion__section-header--focused';\n    this.sectionHeadingClass = 'govuk-accordion__section-heading';\n    this.sectionSummaryClass = 'govuk-accordion__section-summary';\n    this.sectionButtonClass = 'govuk-accordion__section-button';\n    this.sectionExpandedClass = 'govuk-accordion__section--expanded';\n  } // Initialize component\n\n\n  Accordion.prototype.init = function () {\n    // Check for module\n    if (!this.$module) {\n      return;\n    }\n\n    this.initControls();\n    this.initSectionHeaders(); // See if \"Open all\" button text should be updated\n\n    var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n    this.updateOpenAllButton(areAllSectionsOpen);\n  }; // Initialise controls and set attributes\n\n\n  Accordion.prototype.initControls = function () {\n    // Create \"Open all\" button and set attributes\n    this.$openAllButton = document.createElement('button');\n    this.$openAllButton.setAttribute('type', 'button');\n    this.$openAllButton.innerHTML = 'Open all <span class=\"govuk-visually-hidden\">sections</span>';\n    this.$openAllButton.setAttribute('class', this.openAllClass);\n    this.$openAllButton.setAttribute('aria-expanded', 'false');\n    this.$openAllButton.setAttribute('type', 'button'); // Create control wrapper and add controls to it\n\n    var accordionControls = document.createElement('div');\n    accordionControls.setAttribute('class', this.controlsClass);\n    accordionControls.appendChild(this.$openAllButton);\n    this.$module.insertBefore(accordionControls, this.$module.firstChild); // Handle events for the controls\n\n    this.$openAllButton.addEventListener('click', this.onOpenOrCloseAllToggle.bind(this));\n  }; // Initialise section headers\n\n\n  Accordion.prototype.initSectionHeaders = function () {\n    // Loop through section headers\n    nodeListForEach(this.$sections, function ($section, i) {\n      // Set header attributes\n      var header = $section.querySelector('.' + this.sectionHeaderClass);\n      this.initHeaderAttributes(header, i);\n      this.setExpanded(this.isExpanded($section), $section); // Handle events\n\n      header.addEventListener('click', this.onSectionToggle.bind(this, $section)); // See if there is any state stored in sessionStorage and set the sections to\n      // open or closed.\n\n      this.setInitialState($section);\n    }.bind(this));\n  }; // Set individual header attributes\n\n\n  Accordion.prototype.initHeaderAttributes = function ($headerWrapper, index) {\n    var $module = this;\n    var $span = $headerWrapper.querySelector('.' + this.sectionButtonClass);\n    var $heading = $headerWrapper.querySelector('.' + this.sectionHeadingClass);\n    var $summary = $headerWrapper.querySelector('.' + this.sectionSummaryClass); // Copy existing span element to an actual button element, for improved accessibility.\n\n    var $button = document.createElement('button');\n    $button.setAttribute('type', 'button');\n    $button.setAttribute('id', this.moduleId + '-heading-' + (index + 1));\n    $button.setAttribute('aria-controls', this.moduleId + '-content-' + (index + 1)); // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n\n    for (var i = 0; i < $span.attributes.length; i++) {\n      var attr = $span.attributes.item(i);\n      $button.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n\n    $button.addEventListener('focusin', function (e) {\n      if (!$headerWrapper.classList.contains($module.sectionHeaderFocusedClass)) {\n        $headerWrapper.className += ' ' + $module.sectionHeaderFocusedClass;\n      }\n    });\n    $button.addEventListener('blur', function (e) {\n      $headerWrapper.classList.remove($module.sectionHeaderFocusedClass);\n    });\n\n    if (typeof $summary !== 'undefined' && $summary !== null) {\n      $button.setAttribute('aria-describedby', this.moduleId + '-summary-' + (index + 1));\n    } // $span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n\n\n    $button.innerHTML = $span.innerHTML;\n    $heading.removeChild($span);\n    $heading.appendChild($button); // Add \"+/-\" icon\n\n    var icon = document.createElement('span');\n    icon.className = this.iconClass;\n    icon.setAttribute('aria-hidden', 'true');\n    $heading.appendChild(icon);\n  }; // When section toggled, set and store state\n\n\n  Accordion.prototype.onSectionToggle = function ($section) {\n    var expanded = this.isExpanded($section);\n    this.setExpanded(!expanded, $section); // Store the state in sessionStorage when a change is triggered\n\n    this.storeState($section);\n  }; // When Open/Close All toggled, set and store state\n\n\n  Accordion.prototype.onOpenOrCloseAllToggle = function () {\n    var $module = this;\n    var $sections = this.$sections;\n    var nowExpanded = !this.checkIfAllSectionsOpen();\n    nodeListForEach($sections, function ($section) {\n      $module.setExpanded(nowExpanded, $section); // Store the state in sessionStorage when a change is triggered\n\n      $module.storeState($section);\n    });\n    $module.updateOpenAllButton(nowExpanded);\n  }; // Set section attributes when opened/closed\n\n\n  Accordion.prototype.setExpanded = function (expanded, $section) {\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n    $button.setAttribute('aria-expanded', expanded);\n\n    if (expanded) {\n      $section.classList.add(this.sectionExpandedClass);\n    } else {\n      $section.classList.remove(this.sectionExpandedClass);\n    } // See if \"Open all\" button text should be updated\n\n\n    var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n    this.updateOpenAllButton(areAllSectionsOpen);\n  }; // Get state of section\n\n\n  Accordion.prototype.isExpanded = function ($section) {\n    return $section.classList.contains(this.sectionExpandedClass);\n  }; // Check if all sections are open\n\n\n  Accordion.prototype.checkIfAllSectionsOpen = function () {\n    // Get a count of all the Accordion sections\n    var sectionsCount = this.$sections.length; // Get a count of all Accordion sections that are expanded\n\n    var expandedSectionCount = this.$module.querySelectorAll('.' + this.sectionExpandedClass).length;\n    var areAllSectionsOpen = sectionsCount === expandedSectionCount;\n    return areAllSectionsOpen;\n  }; // Update \"Open all\" button\n\n\n  Accordion.prototype.updateOpenAllButton = function (expanded) {\n    var newButtonText = expanded ? 'Close all' : 'Open all';\n    newButtonText += '<span class=\"govuk-visually-hidden\"> sections</span>';\n    this.$openAllButton.setAttribute('aria-expanded', expanded);\n    this.$openAllButton.innerHTML = newButtonText;\n  }; // Check for `window.sessionStorage`, and that it actually works.\n\n\n  var helper = {\n    checkForSessionStorage: function checkForSessionStorage() {\n      var testString = 'this is the test string';\n      var result;\n\n      try {\n        window.sessionStorage.setItem(testString, testString);\n        result = window.sessionStorage.getItem(testString) === testString.toString();\n        window.sessionStorage.removeItem(testString);\n        return result;\n      } catch (exception) {\n        if (typeof console === 'undefined' || typeof console.log === 'undefined') {\n          console.log('Notice: sessionStorage not available.');\n        }\n      }\n    }\n  }; // Set the state of the accordions in sessionStorage\n\n  Accordion.prototype.storeState = function ($section) {\n    if (this.browserSupportsSessionStorage) {\n      // We need a unique way of identifying each content in the accordion. Since\n      // an `#id` should be unique and an `id` is required for `aria-` attributes\n      // `id` can be safely used.\n      var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n      if ($button) {\n        var contentId = $button.getAttribute('aria-controls');\n        var contentState = $button.getAttribute('aria-expanded');\n\n        if (typeof contentId === 'undefined' && (typeof console === 'undefined' || typeof console.log === 'undefined')) {\n          console.error(new Error('No aria controls present in accordion section heading.'));\n        }\n\n        if (typeof contentState === 'undefined' && (typeof console === 'undefined' || typeof console.log === 'undefined')) {\n          console.error(new Error('No aria expanded present in accordion section heading.'));\n        } // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n\n\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState);\n        }\n      }\n    }\n  }; // Read the state of the accordions from sessionStorage\n\n\n  Accordion.prototype.setInitialState = function ($section) {\n    if (this.browserSupportsSessionStorage) {\n      var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n      if ($button) {\n        var contentId = $button.getAttribute('aria-controls');\n        var contentState = contentId ? window.sessionStorage.getItem(contentId) : null;\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section);\n        }\n      }\n    }\n  };\n\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Window/detect.js\n    var detect = ('Window' in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Window&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      (function (global) {\n        if (global.constructor) {\n          global.Window = global.constructor;\n        } else {\n          (global.Window = global.constructor = new Function('return function Window() {}')()).prototype = this;\n        }\n      })(this);\n    }\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Event/detect.js\n    var detect = function (global) {\n      if (!('Event' in global)) return false;\n      if (typeof global.Event === 'function') return true;\n\n      try {\n        // In IE 9-11, the Event object exists but cannot be instantiated\n        new Event('click');\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }(this);\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Event&flags=always\n\n    (function () {\n      var unlistenableWindowEvents = {\n        click: 1,\n        dblclick: 1,\n        keyup: 1,\n        keypress: 1,\n        keydown: 1,\n        mousedown: 1,\n        mouseup: 1,\n        mousemove: 1,\n        mouseover: 1,\n        mouseenter: 1,\n        mouseleave: 1,\n        mouseout: 1,\n        storage: 1,\n        storagecommit: 1,\n        textinput: 1\n      }; // This polyfill depends on availability of `document` so will not run in a worker\n      // However, we asssume there are no browsers with worker support that lack proper\n      // support for `Event` within the worker\n\n      if (typeof document === 'undefined' || typeof window === 'undefined') return;\n\n      function indexOf(array, element) {\n        var index = -1,\n            length = array.length;\n\n        while (++index < length) {\n          if (index in array && array[index] === element) {\n            return index;\n          }\n        }\n\n        return -1;\n      }\n\n      var existingProto = window.Event && window.Event.prototype || null;\n\n      window.Event = Window.prototype.Event = function Event(type, eventInitDict) {\n        if (!type) {\n          throw new Error('Not enough arguments');\n        }\n\n        var event; // Shortcut if browser supports createEvent\n\n        if ('createEvent' in document) {\n          event = document.createEvent('Event');\n          var bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n          var cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n          event.initEvent(type, bubbles, cancelable);\n          return event;\n        }\n\n        event = document.createEventObject();\n        event.type = type;\n        event.bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n        event.cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n        return event;\n      };\n\n      if (existingProto) {\n        Object.defineProperty(window.Event, 'prototype', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: existingProto\n        });\n      }\n\n      if (!('createEvent' in document)) {\n        window.addEventListener = Window.prototype.addEventListener = Document.prototype.addEventListener = Element.prototype.addEventListener = function addEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1];\n\n          if (element === window && type in unlistenableWindowEvents) {\n            throw new Error('In IE8 the event: ' + type + ' is not available on the window object. Please see https://github.com/Financial-Times/polyfill-service/issues/317 for more information.');\n          }\n\n          if (!element._events) {\n            element._events = {};\n          }\n\n          if (!element._events[type]) {\n            element._events[type] = function (event) {\n              var list = element._events[event.type].list,\n                  events = list.slice(),\n                  index = -1,\n                  length = events.length,\n                  eventElement;\n\n              event.preventDefault = function preventDefault() {\n                if (event.cancelable !== false) {\n                  event.returnValue = false;\n                }\n              };\n\n              event.stopPropagation = function stopPropagation() {\n                event.cancelBubble = true;\n              };\n\n              event.stopImmediatePropagation = function stopImmediatePropagation() {\n                event.cancelBubble = true;\n                event.cancelImmediate = true;\n              };\n\n              event.currentTarget = element;\n              event.relatedTarget = event.fromElement || null;\n              event.target = event.target || event.srcElement || element;\n              event.timeStamp = new Date().getTime();\n\n              if (event.clientX) {\n                event.pageX = event.clientX + document.documentElement.scrollLeft;\n                event.pageY = event.clientY + document.documentElement.scrollTop;\n              }\n\n              while (++index < length && !event.cancelImmediate) {\n                if (index in events) {\n                  eventElement = events[index];\n\n                  if (indexOf(list, eventElement) !== -1 && typeof eventElement === 'function') {\n                    eventElement.call(element, event);\n                  }\n                }\n              }\n            };\n\n            element._events[type].list = [];\n\n            if (element.attachEvent) {\n              element.attachEvent('on' + type, element._events[type]);\n            }\n          }\n\n          element._events[type].list.push(listener);\n        };\n\n        window.removeEventListener = Window.prototype.removeEventListener = Document.prototype.removeEventListener = Element.prototype.removeEventListener = function removeEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1],\n              index;\n\n          if (element._events && element._events[type] && element._events[type].list) {\n            index = indexOf(element._events[type].list, listener);\n\n            if (index !== -1) {\n              element._events[type].list.splice(index, 1);\n\n              if (!element._events[type].list.length) {\n                if (element.detachEvent) {\n                  element.detachEvent('on' + type, element._events[type]);\n                }\n\n                delete element._events[type];\n              }\n            }\n          }\n        };\n\n        window.dispatchEvent = Window.prototype.dispatchEvent = Document.prototype.dispatchEvent = Element.prototype.dispatchEvent = function dispatchEvent(event) {\n          if (!arguments.length) {\n            throw new Error('Not enough arguments');\n          }\n\n          if (!event || typeof event.type !== 'string') {\n            throw new Error('DOM Events Exception 0');\n          }\n\n          var element = this,\n              type = event.type;\n\n          try {\n            if (!event.bubbles) {\n              event.cancelBubble = true;\n\n              var cancelBubbleEvent = function cancelBubbleEvent(event) {\n                event.cancelBubble = true;\n                (element || window).detachEvent('on' + type, cancelBubbleEvent);\n              };\n\n              this.attachEvent('on' + type, cancelBubbleEvent);\n            }\n\n            this.fireEvent('on' + type, event);\n          } catch (error) {\n            event.target = element;\n\n            do {\n              event.currentTarget = element;\n\n              if ('_events' in element && typeof element._events[type] === 'function') {\n                element._events[type].call(element, event);\n              }\n\n              if (typeof element['on' + type] === 'function') {\n                element['on' + type].call(element, event);\n              }\n\n              element = element.nodeType === 9 ? element.parentWindow : element.parentNode;\n            } while (element && !event.cancelBubble);\n          }\n\n          return true;\n        }; // Add the DOMContentLoaded Event\n\n\n        document.attachEvent('onreadystatechange', function () {\n          if (document.readyState === 'complete') {\n            document.dispatchEvent(new Event('DOMContentLoaded', {\n              bubbles: true\n            }));\n          }\n        });\n      }\n    })();\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * Usage instructions:\n   * the 'shim' will be automatically initialised\n   */\n\n  var KEY_SPACE = 32;\n  var DEBOUNCE_TIMEOUT_IN_SECONDS = 1;\n  var debounceFormSubmitTimer = null;\n\n  function Button($module) {\n    this.$module = $module;\n  }\n  /**\n  * if the event target element has a role='button' and the event is key space pressed\n  * then it prevents the default event and triggers a click event\n  * @param {object} event event\n  */\n\n\n  Button.prototype.handleKeyDown = function (event) {\n    // get the target element\n    var target = event.target; // if the element has a role='button' and the pressed key is a space, we'll simulate a click\n\n    if (target.getAttribute('role') === 'button' && event.keyCode === KEY_SPACE) {\n      event.preventDefault(); // trigger the target's click event\n\n      target.click();\n    }\n  };\n  /**\n  * If the click quickly succeeds a previous click then nothing will happen.\n  * This stops people accidentally causing multiple form submissions by\n  * double clicking buttons.\n  */\n\n\n  Button.prototype.debounce = function (event) {\n    var target = event.target; // Check the button that is clicked on has the preventDoubleClick feature enabled\n\n    if (target.getAttribute('data-prevent-double-click') !== 'true') {\n      return;\n    } // If the timer is still running then we want to prevent the click from submitting the form\n\n\n    if (debounceFormSubmitTimer) {\n      event.preventDefault();\n      return false;\n    }\n\n    debounceFormSubmitTimer = setTimeout(function () {\n      debounceFormSubmitTimer = null;\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000);\n  };\n  /**\n  * Initialise an event listener for keydown at document level\n  * this will help listening for later inserted elements with a role=\"button\"\n  */\n\n\n  Button.prototype.init = function () {\n    this.$module.addEventListener('keydown', this.handleKeyDown);\n    this.$module.addEventListener('click', this.debounce);\n  };\n  /**\n   * JavaScript 'polyfill' for HTML5's <details> and <summary> elements\n   * and 'shim' to add accessiblity enhancements for all browsers\n   *\n   * http://caniuse.com/#feat=details\n   *\n   * Usage instructions:\n   * the 'polyfill' will be automatically initialised\n   */\n\n\n  var KEY_ENTER = 13;\n  var KEY_SPACE$1 = 32; // Create a flag to know if the browser supports navtive details\n\n  var NATIVE_DETAILS = typeof document.createElement('details').open === 'boolean';\n\n  function Details($module) {\n    this.$module = $module;\n  }\n  /**\n  * Handle cross-modal click events\n  * @param {object} node element\n  * @param {function} callback function\n  */\n\n\n  Details.prototype.handleInputs = function (node, callback) {\n    node.addEventListener('keypress', function (event) {\n      var target = event.target; // When the key gets pressed - check if it is enter or space\n\n      if (event.keyCode === KEY_ENTER || event.keyCode === KEY_SPACE$1) {\n        if (target.nodeName.toLowerCase() === 'summary') {\n          // Prevent space from scrolling the page\n          // and enter from submitting a form\n          event.preventDefault(); // Click to let the click event do all the necessary action\n\n          if (target.click) {\n            target.click();\n          } else {\n            // except Safari 5.1 and under don't support .click() here\n            callback(event);\n          }\n        }\n      }\n    }); // Prevent keyup to prevent clicking twice in Firefox when using space key\n\n    node.addEventListener('keyup', function (event) {\n      var target = event.target;\n\n      if (event.keyCode === KEY_SPACE$1) {\n        if (target.nodeName.toLowerCase() === 'summary') {\n          event.preventDefault();\n        }\n      }\n    });\n    node.addEventListener('click', callback);\n  };\n\n  Details.prototype.init = function () {\n    var $module = this.$module;\n\n    if (!$module) {\n      return;\n    } // Save shortcuts to the inner summary and content elements\n\n\n    var $summary = this.$summary = $module.getElementsByTagName('summary').item(0);\n    var $content = this.$content = $module.getElementsByTagName('div').item(0); // If <details> doesn't have a <summary> and a <div> representing the content\n    // it means the required HTML structure is not met so the script will stop\n\n    if (!$summary || !$content) {\n      return;\n    } // If the content doesn't have an ID, assign it one now\n    // which we'll need for the summary's aria-controls assignment\n\n\n    if (!$content.id) {\n      $content.id = 'details-content-' + generateUniqueID();\n    } // Add ARIA role=\"group\" to details\n\n\n    $module.setAttribute('role', 'group'); // Add role=button to summary\n\n    $summary.setAttribute('role', 'button'); // Add aria-controls\n\n    $summary.setAttribute('aria-controls', $content.id); // Set tabIndex so the summary is keyboard accessible for non-native elements\n    // http://www.saliences.com/browserBugs/tabIndex.html\n\n    if (!NATIVE_DETAILS) {\n      $summary.tabIndex = 0;\n    } // Detect initial open state\n\n\n    var openAttr = $module.getAttribute('open') !== null;\n\n    if (openAttr === true) {\n      $summary.setAttribute('aria-expanded', 'true');\n      $content.setAttribute('aria-hidden', 'false');\n    } else {\n      $summary.setAttribute('aria-expanded', 'false');\n      $content.setAttribute('aria-hidden', 'true');\n\n      if (!NATIVE_DETAILS) {\n        $content.style.display = 'none';\n      }\n    } // Bind an event to handle summary elements\n\n\n    this.handleInputs($summary, this.setAttributes.bind(this));\n  };\n  /**\n  * Define a statechange function that updates aria-expanded and style.display\n  * @param {object} summary element\n  */\n\n\n  Details.prototype.setAttributes = function () {\n    var $module = this.$module;\n    var $summary = this.$summary;\n    var $content = this.$content;\n    var expanded = $summary.getAttribute('aria-expanded') === 'true';\n    var hidden = $content.getAttribute('aria-hidden') === 'true';\n    $summary.setAttribute('aria-expanded', expanded ? 'false' : 'true');\n    $content.setAttribute('aria-hidden', hidden ? 'false' : 'true');\n\n    if (!NATIVE_DETAILS) {\n      $content.style.display = expanded ? 'none' : '';\n      var hasOpenAttr = $module.getAttribute('open') !== null;\n\n      if (!hasOpenAttr) {\n        $module.setAttribute('open', 'open');\n      } else {\n        $module.removeAttribute('open');\n      }\n    }\n\n    return true;\n  };\n  /**\n  * Remove the click event from the node element\n  * @param {object} node element\n  */\n\n\n  Details.prototype.destroy = function (node) {\n    node.removeEventListener('keypress');\n    node.removeEventListener('keyup');\n    node.removeEventListener('click');\n  };\n\n  function CharacterCount($module) {\n    this.$module = $module;\n    this.$textarea = $module.querySelector('.js-character-count');\n  }\n\n  CharacterCount.prototype.defaults = {\n    characterCountAttribute: 'data-maxlength',\n    wordCountAttribute: 'data-maxwords'\n  }; // Initialize component\n\n  CharacterCount.prototype.init = function () {\n    // Check for module\n    var $module = this.$module;\n    var $textarea = this.$textarea;\n\n    if (!$textarea) {\n      return;\n    } // Read options set using dataset ('data-' values)\n\n\n    this.options = this.getDataset($module); // Determine the limit attribute (characters or words)\n\n    var countAttribute = this.defaults.characterCountAttribute;\n\n    if (this.options.maxwords) {\n      countAttribute = this.defaults.wordCountAttribute;\n    } // Save the element limit\n\n\n    this.maxLength = $module.getAttribute(countAttribute); // Check for limit\n\n    if (!this.maxLength) {\n      return;\n    } // Generate and reference message\n\n\n    var boundCreateCountMessage = this.createCountMessage.bind(this);\n    this.countMessage = boundCreateCountMessage(); // If there's a maximum length defined and the count message exists\n\n    if (this.countMessage) {\n      // Remove hard limit if set\n      $module.removeAttribute('maxlength'); // Bind event changes to the textarea\n\n      var boundChangeEvents = this.bindChangeEvents.bind(this);\n      boundChangeEvents(); // Update count message\n\n      var boundUpdateCountMessage = this.updateCountMessage.bind(this);\n      boundUpdateCountMessage();\n    }\n  }; // Read data attributes\n\n\n  CharacterCount.prototype.getDataset = function (element) {\n    var dataset = {};\n    var attributes = element.attributes;\n\n    if (attributes) {\n      for (var i = 0; i < attributes.length; i++) {\n        var attribute = attributes[i];\n        var match = attribute.name.match(/^data-(.+)/);\n\n        if (match) {\n          dataset[match[1]] = attribute.value;\n        }\n      }\n    }\n\n    return dataset;\n  }; // Counts characters or words in text\n\n\n  CharacterCount.prototype.count = function (text) {\n    var length;\n\n    if (this.options.maxwords) {\n      var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\n\n      length = tokens.length;\n    } else {\n      length = text.length;\n    }\n\n    return length;\n  }; // Generate count message and bind it to the input\n  // returns reference to the generated element\n\n\n  CharacterCount.prototype.createCountMessage = function () {\n    var countElement = this.$textarea;\n    var elementId = countElement.id; // Check for existing info count message\n\n    var countMessage = document.getElementById(elementId + '-info'); // If there is no existing info count message we add one right after the field\n\n    if (elementId && !countMessage) {\n      countElement.insertAdjacentHTML('afterend', '<span id=\"' + elementId + '-info\" class=\"govuk-hint govuk-character-count__message\" aria-live=\"polite\"></span>');\n      this.describedBy = countElement.getAttribute('aria-describedby');\n      this.describedByInfo = this.describedBy + ' ' + elementId + '-info';\n      countElement.setAttribute('aria-describedby', this.describedByInfo);\n      countMessage = document.getElementById(elementId + '-info');\n    } else {\n      // If there is an existing info count message we move it right after the field\n      countElement.insertAdjacentElement('afterend', countMessage);\n    }\n\n    return countMessage;\n  }; // Bind input propertychange to the elements and update based on the change\n\n\n  CharacterCount.prototype.bindChangeEvents = function () {\n    var $textarea = this.$textarea;\n    $textarea.addEventListener('keyup', this.checkIfValueChanged.bind(this)); // Bind focus/blur events to start/stop polling\n\n    $textarea.addEventListener('focus', this.handleFocus.bind(this));\n    $textarea.addEventListener('blur', this.handleBlur.bind(this));\n  }; // Speech recognition software such as Dragon NaturallySpeaking will modify the\n  // fields by directly changing its `value`. These changes don't trigger events\n  // in JavaScript, so we need to poll to handle when and if they occur.\n\n\n  CharacterCount.prototype.checkIfValueChanged = function () {\n    if (!this.$textarea.oldValue) this.$textarea.oldValue = '';\n\n    if (this.$textarea.value !== this.$textarea.oldValue) {\n      this.$textarea.oldValue = this.$textarea.value;\n      var boundUpdateCountMessage = this.updateCountMessage.bind(this);\n      boundUpdateCountMessage();\n    }\n  }; // Update message box\n\n\n  CharacterCount.prototype.updateCountMessage = function () {\n    var countElement = this.$textarea;\n    var options = this.options;\n    var countMessage = this.countMessage; // Determine the remaining number of characters/words\n\n    var currentLength = this.count(countElement.value);\n    var maxLength = this.maxLength;\n    var remainingNumber = maxLength - currentLength; // Set threshold if presented in options\n\n    var thresholdPercent = options.threshold ? options.threshold : 0;\n    var thresholdValue = maxLength * thresholdPercent / 100;\n\n    if (thresholdValue > currentLength) {\n      countMessage.classList.add('govuk-character-count__message--disabled');\n    } else {\n      countMessage.classList.remove('govuk-character-count__message--disabled');\n    } // Update styles\n\n\n    if (remainingNumber < 0) {\n      countElement.classList.add('govuk-textarea--error');\n      countMessage.classList.remove('govuk-hint');\n      countMessage.classList.add('govuk-error-message');\n    } else {\n      countElement.classList.remove('govuk-textarea--error');\n      countMessage.classList.remove('govuk-error-message');\n      countMessage.classList.add('govuk-hint');\n    } // Update message\n\n\n    var charVerb = 'remaining';\n    var charNoun = 'character';\n    var displayNumber = remainingNumber;\n\n    if (options.maxwords) {\n      charNoun = 'word';\n    }\n\n    charNoun = charNoun + (remainingNumber === -1 || remainingNumber === 1 ? '' : 's');\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining';\n    displayNumber = Math.abs(remainingNumber);\n    countMessage.innerHTML = 'You have ' + displayNumber + ' ' + charNoun + ' ' + charVerb;\n  };\n\n  CharacterCount.prototype.handleFocus = function () {\n    // Check if value changed on focus\n    this.valueChecker = setInterval(this.checkIfValueChanged.bind(this), 1000);\n  };\n\n  CharacterCount.prototype.handleBlur = function () {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker);\n  };\n\n  function Checkboxes($module) {\n    this.$module = $module;\n    this.$inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\n  }\n\n  Checkboxes.prototype.init = function () {\n    var $module = this.$module;\n    var $inputs = this.$inputs;\n    /**\n    * Loop over all items with [data-controls]\n    * Check if they have a matching conditional reveal\n    * If they do, assign attributes.\n    **/\n\n    nodeListForEach($inputs, function ($input) {\n      var controls = $input.getAttribute('data-aria-controls'); // Check if input controls anything\n      // Check if content exists, before setting attributes.\n\n      if (!controls || !$module.querySelector('#' + controls)) {\n        return;\n      } // If we have content that is controlled, set attributes.\n\n\n      $input.setAttribute('aria-controls', controls);\n      $input.removeAttribute('data-aria-controls');\n      this.setAttributes($input);\n    }.bind(this)); // Handle events\n\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n\n  Checkboxes.prototype.setAttributes = function ($input) {\n    var inputIsChecked = $input.checked;\n    $input.setAttribute('aria-expanded', inputIsChecked);\n    var $content = this.$module.querySelector('#' + $input.getAttribute('aria-controls'));\n\n    if ($content) {\n      $content.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\n    }\n  };\n\n  Checkboxes.prototype.handleClick = function (event) {\n    var $target = event.target; // If a checkbox with aria-controls, handle click\n\n    var isCheckbox = $target.getAttribute('type') === 'checkbox';\n    var hasAriaControls = $target.getAttribute('aria-controls');\n\n    if (isCheckbox && hasAriaControls) {\n      this.setAttributes($target);\n    }\n  };\n\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/detect.js\n    var detect = 'document' in this && \"matches\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/polyfill.js\n\n    Element.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.mozMatchesSelector || function matches(selector) {\n      var element = this;\n      var elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n      var index = 0;\n\n      while (elements[index] && elements[index] !== element) {\n        ++index;\n      }\n\n      return !!elements[index];\n    };\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/detect.js\n    var detect = 'document' in this && \"closest\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/polyfill.js\n\n    Element.prototype.closest = function closest(selector) {\n      var node = this;\n\n      while (node) {\n        if (node.matches(selector)) return node;else node = 'SVGElement' in window && node instanceof SVGElement ? node.parentNode : node.parentElement;\n      }\n\n      return null;\n    };\n  }).call('object' === (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window || 'object' === (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self || 'object' === (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global || {});\n\n  function ErrorSummary($module) {\n    this.$module = $module;\n  }\n\n  ErrorSummary.prototype.init = function () {\n    var $module = this.$module;\n\n    if (!$module) {\n      return;\n    }\n\n    $module.focus();\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n  * Click event handler\n  *\n  * @param {MouseEvent} event - Click event\n  */\n\n\n  ErrorSummary.prototype.handleClick = function (event) {\n    var target = event.target;\n\n    if (this.focusTarget(target)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n   * (e.g. \"Edit, has autocomplete\").\n   *\n   * @param {HTMLElement} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n\n\n  ErrorSummary.prototype.focusTarget = function ($target) {\n    // If the element that was clicked was not a link, return early\n    if ($target.tagName !== 'A' || $target.href === false) {\n      return false;\n    }\n\n    var inputId = this.getFragmentFromUrl($target.href);\n    var $input = document.getElementById(inputId);\n\n    if (!$input) {\n      return false;\n    }\n\n    var $legendOrLabel = this.getAssociatedLegendOrLabel($input);\n\n    if (!$legendOrLabel) {\n      return false;\n    } // Prefer using the history API where possible, as updating\n    // window.location.hash causes the viewport to jump to the input briefly\n    // before then scrolling to the label/legend in IE10, IE11 and Edge (as tested\n    // in Edge 17).\n\n\n    if (window.history.pushState) {\n      window.history.pushState(null, null, '#' + inputId);\n    } else {\n      window.location.hash = inputId;\n    } // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n\n\n    $legendOrLabel.scrollIntoView();\n    $input.focus({\n      preventScroll: true\n    });\n    return true;\n  };\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash) from a URL, but not including\n   * the hash.\n   *\n   * @param {string} url - URL\n   * @returns {string} Fragment from URL, without the hash\n   */\n\n\n  ErrorSummary.prototype.getFragmentFromUrl = function (url) {\n    if (url.indexOf('#') === -1) {\n      return false;\n    }\n\n    return url.split('#').pop();\n  };\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @param {HTMLElement} $input - The input\n   * @returns {HTMLElement} Associated legend or label, or null if no associated\n   *                        legend or label can be found\n   */\n\n\n  ErrorSummary.prototype.getAssociatedLegendOrLabel = function ($input) {\n    var $fieldset = $input.closest('fieldset');\n\n    if ($fieldset) {\n      var legends = $fieldset.getElementsByTagName('legend');\n\n      if (legends.length) {\n        return legends[0];\n      }\n    }\n\n    return document.querySelector(\"label[for='\" + $input.getAttribute('id') + \"']\") || $input.closest('label');\n  };\n\n  function Header($module) {\n    this.$module = $module;\n  }\n\n  Header.prototype.init = function () {\n    // Check for module\n    var $module = this.$module;\n\n    if (!$module) {\n      return;\n    } // Check for button\n\n\n    var $toggleButton = $module.querySelector('.js-header-toggle');\n\n    if (!$toggleButton) {\n      return;\n    } // Handle $toggleButton click events\n\n\n    $toggleButton.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n  * Toggle class\n  * @param {object} node element\n  * @param {string} className to toggle\n  */\n\n\n  Header.prototype.toggleClass = function (node, className) {\n    if (node.className.indexOf(className) > 0) {\n      node.className = node.className.replace(' ' + className, '');\n    } else {\n      node.className += ' ' + className;\n    }\n  };\n  /**\n  * An event handler for click event on $toggleButton\n  * @param {object} event event\n  */\n\n\n  Header.prototype.handleClick = function (event) {\n    var $module = this.$module;\n    var $toggleButton = event.target || event.srcElement;\n    var $target = $module.querySelector('#' + $toggleButton.getAttribute('aria-controls')); // If a button with aria-controls, handle click\n\n    if ($toggleButton && $target) {\n      this.toggleClass($target, 'govuk-header__navigation--open');\n      this.toggleClass($toggleButton, 'govuk-header__menu-button--open');\n      $toggleButton.setAttribute('aria-expanded', $toggleButton.getAttribute('aria-expanded') !== 'true');\n      $target.setAttribute('aria-hidden', $target.getAttribute('aria-hidden') === 'false');\n    }\n  };\n\n  function Radios($module) {\n    this.$module = $module;\n    this.$inputs = $module.querySelectorAll('input[type=\"radio\"]');\n  }\n\n  Radios.prototype.init = function () {\n    var $module = this.$module;\n    var $inputs = this.$inputs;\n    /**\n    * Loop over all items with [data-controls]\n    * Check if they have a matching conditional reveal\n    * If they do, assign attributes.\n    **/\n\n    nodeListForEach($inputs, function ($input) {\n      var controls = $input.getAttribute('data-aria-controls'); // Check if input controls anything\n      // Check if content exists, before setting attributes.\n\n      if (!controls || !$module.querySelector('#' + controls)) {\n        return;\n      } // If we have content that is controlled, set attributes.\n\n\n      $input.setAttribute('aria-controls', controls);\n      $input.removeAttribute('data-aria-controls');\n      this.setAttributes($input);\n    }.bind(this)); // Handle events\n\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n\n  Radios.prototype.setAttributes = function ($input) {\n    var inputIsChecked = $input.checked;\n    $input.setAttribute('aria-expanded', inputIsChecked);\n    var $content = this.$module.querySelector('#' + $input.getAttribute('aria-controls'));\n\n    if ($content) {\n      $content.classList.toggle('govuk-radios__conditional--hidden', !inputIsChecked);\n    }\n  };\n\n  Radios.prototype.handleClick = function (event) {\n    nodeListForEach(this.$inputs, function ($input) {\n      // If a radio with aria-controls, handle click\n      var isRadio = $input.getAttribute('type') === 'radio';\n      var hasAriaControls = $input.getAttribute('aria-controls');\n\n      if (isRadio && hasAriaControls) {\n        this.setAttributes($input);\n      }\n    }.bind(this));\n  };\n\n  function Tabs($module) {\n    this.$module = $module;\n    this.$tabs = $module.querySelectorAll('.govuk-tabs__tab');\n    this.keys = {\n      left: 37,\n      right: 39,\n      up: 38,\n      down: 40\n    };\n    this.jsHiddenClass = 'govuk-tabs__panel--hidden';\n  }\n\n  Tabs.prototype.init = function () {\n    if (typeof window.matchMedia === 'function') {\n      this.setupResponsiveChecks();\n    } else {\n      this.setup();\n    }\n  };\n\n  Tabs.prototype.setupResponsiveChecks = function () {\n    this.mql = window.matchMedia('(min-width: 40.0625em)');\n    this.mql.addListener(this.checkMode.bind(this));\n    this.checkMode();\n  };\n\n  Tabs.prototype.checkMode = function () {\n    if (this.mql.matches) {\n      this.setup();\n    } else {\n      this.teardown();\n    }\n  };\n\n  Tabs.prototype.setup = function () {\n    var $module = this.$module;\n    var $tabs = this.$tabs;\n    var $tabList = $module.querySelector('.govuk-tabs__list');\n    var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\n\n    if (!$tabs || !$tabList || !$tabListItems) {\n      return;\n    }\n\n    $tabList.setAttribute('role', 'tablist');\n    nodeListForEach($tabListItems, function ($item) {\n      $item.setAttribute('role', 'presentation');\n    });\n    nodeListForEach($tabs, function ($tab) {\n      // Set HTML attributes\n      this.setAttributes($tab); // Save bounded functions to use when removing event listeners during teardown\n\n      $tab.boundTabClick = this.onTabClick.bind(this);\n      $tab.boundTabKeydown = this.onTabKeydown.bind(this); // Handle events\n\n      $tab.addEventListener('click', $tab.boundTabClick, true);\n      $tab.addEventListener('keydown', $tab.boundTabKeydown, true); // Remove old active panels\n\n      this.hideTab($tab);\n    }.bind(this)); // Show either the active tab according to the URL's hash or the first tab\n\n    var $activeTab = this.getTab(window.location.hash) || this.$tabs[0];\n    this.showTab($activeTab); // Handle hashchange events\n\n    $module.boundOnHashChange = this.onHashChange.bind(this);\n    window.addEventListener('hashchange', $module.boundOnHashChange, true);\n  };\n\n  Tabs.prototype.teardown = function () {\n    var $module = this.$module;\n    var $tabs = this.$tabs;\n    var $tabList = $module.querySelector('.govuk-tabs__list');\n    var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\n\n    if (!$tabs || !$tabList || !$tabListItems) {\n      return;\n    }\n\n    $tabList.removeAttribute('role');\n    nodeListForEach($tabListItems, function ($item) {\n      $item.removeAttribute('role', 'presentation');\n    });\n    nodeListForEach($tabs, function ($tab) {\n      // Remove events\n      $tab.removeEventListener('click', $tab.boundTabClick, true);\n      $tab.removeEventListener('keydown', $tab.boundTabKeydown, true); // Unset HTML attributes\n\n      this.unsetAttributes($tab);\n    }.bind(this)); // Remove hashchange event handler\n\n    window.removeEventListener('hashchange', $module.boundOnHashChange, true);\n  };\n\n  Tabs.prototype.onHashChange = function (e) {\n    var hash = window.location.hash;\n    var $tabWithHash = this.getTab(hash);\n\n    if (!$tabWithHash) {\n      return;\n    } // Prevent changing the hash\n\n\n    if (this.changingHash) {\n      this.changingHash = false;\n      return;\n    } // Show either the active tab according to the URL's hash or the first tab\n\n\n    var $previousTab = this.getCurrentTab();\n    this.hideTab($previousTab);\n    this.showTab($tabWithHash);\n    $tabWithHash.focus();\n  };\n\n  Tabs.prototype.hideTab = function ($tab) {\n    this.unhighlightTab($tab);\n    this.hidePanel($tab);\n  };\n\n  Tabs.prototype.showTab = function ($tab) {\n    this.highlightTab($tab);\n    this.showPanel($tab);\n  };\n\n  Tabs.prototype.getTab = function (hash) {\n    return this.$module.querySelector('.govuk-tabs__tab[href=\"' + hash + '\"]');\n  };\n\n  Tabs.prototype.setAttributes = function ($tab) {\n    // set tab attributes\n    var panelId = this.getHref($tab).slice(1);\n    $tab.setAttribute('id', 'tab_' + panelId);\n    $tab.setAttribute('role', 'tab');\n    $tab.setAttribute('aria-controls', panelId);\n    $tab.setAttribute('tabindex', '-1'); // set panel attributes\n\n    var $panel = this.getPanel($tab);\n    $panel.setAttribute('role', 'tabpanel');\n    $panel.setAttribute('aria-labelledby', $tab.id);\n    $panel.classList.add(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.unsetAttributes = function ($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id');\n    $tab.removeAttribute('role');\n    $tab.removeAttribute('aria-controls');\n    $tab.removeAttribute('tabindex'); // unset panel attributes\n\n    var $panel = this.getPanel($tab);\n    $panel.removeAttribute('role');\n    $panel.removeAttribute('aria-labelledby');\n    $panel.classList.remove(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.onTabClick = function (e) {\n    e.preventDefault();\n    var $newTab = e.target;\n    var $currentTab = this.getCurrentTab();\n    this.hideTab($currentTab);\n    this.showTab($newTab);\n    this.createHistoryEntry($newTab);\n  };\n\n  Tabs.prototype.createHistoryEntry = function ($tab) {\n    var $panel = this.getPanel($tab); // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n\n    var id = $panel.id;\n    $panel.id = '';\n    this.changingHash = true;\n    window.location.hash = this.getHref($tab).slice(1);\n    $panel.id = id;\n  };\n\n  Tabs.prototype.onTabKeydown = function (e) {\n    switch (e.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab();\n        e.preventDefault();\n        break;\n\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab();\n        e.preventDefault();\n        break;\n    }\n  };\n\n  Tabs.prototype.activateNextTab = function () {\n    var currentTab = this.getCurrentTab();\n    var nextTabListItem = currentTab.parentNode.nextElementSibling;\n\n    if (nextTabListItem) {\n      var nextTab = nextTabListItem.firstElementChild;\n    }\n\n    if (nextTab) {\n      this.hideTab(currentTab);\n      this.showTab(nextTab);\n      nextTab.focus();\n      this.createHistoryEntry(nextTab);\n    }\n  };\n\n  Tabs.prototype.activatePreviousTab = function () {\n    var currentTab = this.getCurrentTab();\n    var previousTabListItem = currentTab.parentNode.previousElementSibling;\n\n    if (previousTabListItem) {\n      var previousTab = previousTabListItem.firstElementChild;\n    }\n\n    if (previousTab) {\n      this.hideTab(currentTab);\n      this.showTab(previousTab);\n      previousTab.focus();\n      this.createHistoryEntry(previousTab);\n    }\n  };\n\n  Tabs.prototype.getPanel = function ($tab) {\n    var $panel = this.$module.querySelector(this.getHref($tab));\n    return $panel;\n  };\n\n  Tabs.prototype.showPanel = function ($tab) {\n    var $panel = this.getPanel($tab);\n    $panel.classList.remove(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.hidePanel = function (tab) {\n    var $panel = this.getPanel(tab);\n    $panel.classList.add(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.unhighlightTab = function ($tab) {\n    $tab.setAttribute('aria-selected', 'false');\n    $tab.classList.remove('govuk-tabs__tab--selected');\n    $tab.setAttribute('tabindex', '-1');\n  };\n\n  Tabs.prototype.highlightTab = function ($tab) {\n    $tab.setAttribute('aria-selected', 'true');\n    $tab.classList.add('govuk-tabs__tab--selected');\n    $tab.setAttribute('tabindex', '0');\n  };\n\n  Tabs.prototype.getCurrentTab = function () {\n    return this.$module.querySelector('.govuk-tabs__tab--selected');\n  }; // this is because IE doesn't always return the actual value but a relative full path\n  // should be a utility function most prob\n  // http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/\n\n\n  Tabs.prototype.getHref = function ($tab) {\n    var href = $tab.getAttribute('href');\n    var hash = href.slice(href.indexOf('#'), href.length);\n    return hash;\n  };\n\n  function initAll(options) {\n    // Set the options to an empty object by default if no options are passed.\n    options = typeof options !== 'undefined' ? options : {}; // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n    // Defaults to the entire document if nothing is set.\n\n    var scope = typeof options.scope !== 'undefined' ? options.scope : document; // Find all buttons with [role=button] on the scope to enhance.\n\n    new Button(scope).init(); // Find all global accordion components to enhance.\n\n    var $accordions = scope.querySelectorAll('[data-module=\"accordion\"]');\n    nodeListForEach($accordions, function ($accordion) {\n      new Accordion($accordion).init();\n    }); // Find all global details elements to enhance.\n\n    var $details = scope.querySelectorAll('details');\n    nodeListForEach($details, function ($detail) {\n      new Details($detail).init();\n    });\n    var $characterCount = scope.querySelectorAll('[data-module=\"character-count\"]');\n    nodeListForEach($characterCount, function ($characterCount) {\n      new CharacterCount($characterCount).init();\n    });\n    var $checkboxes = scope.querySelectorAll('[data-module=\"checkboxes\"]');\n    nodeListForEach($checkboxes, function ($checkbox) {\n      new Checkboxes($checkbox).init();\n    }); // Find first error summary module to enhance.\n\n    var $errorSummary = scope.querySelector('[data-module=\"error-summary\"]');\n    new ErrorSummary($errorSummary).init(); // Find first header module to enhance.\n\n    var $toggleButton = scope.querySelector('[data-module=\"header\"]');\n    new Header($toggleButton).init();\n    var $radios = scope.querySelectorAll('[data-module=\"radios\"]');\n    nodeListForEach($radios, function ($radio) {\n      new Radios($radio).init();\n    });\n    var $tabs = scope.querySelectorAll('[data-module=\"tabs\"]');\n    nodeListForEach($tabs, function ($tabs) {\n      new Tabs($tabs).init();\n    });\n  }\n\n  exports.initAll = initAll;\n  exports.Accordion = Accordion;\n  exports.Button = Button;\n  exports.Details = Details;\n  exports.CharacterCount = CharacterCount;\n  exports.Checkboxes = Checkboxes;\n  exports.ErrorSummary = ErrorSummary;\n  exports.Header = Header;\n  exports.Radios = Radios;\n  exports.Tabs = Tabs;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/govuk-frontend/all.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });